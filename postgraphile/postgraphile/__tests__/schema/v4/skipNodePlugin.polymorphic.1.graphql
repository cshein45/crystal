interface Application {
  id: Int!
  lastDeployed: Datetime
  name: String!

  """
  Reads a single `PersonOrOrganization` that is related to this `Application`.
  """
  owner: PersonOrOrganization

  """Reads and enables pagination through a set of `Vulnerability`."""
  vulnerabilities(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Filter results to only those of the given types"""
    only: [VulnerabilityType!] @deprecated(reason: "EXPERIMENTAL")
  ): VulnerabilitiesConnection!
}

"""
A condition to be used against `Application` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input ApplicationCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `lastDeployed` field."""
  lastDeployed: Datetime

  """Checks for equality with the object’s `name` field."""
  name: String
}

enum ApplicationType {
  AwsApplication
  GcpApplication
}

"""A connection to a list of `Application` values."""
type ApplicationsConnection {
  """
  A list of edges which contains the `Application` and cursor to aid in pagination.
  """
  edges: [ApplicationsEdge]!

  """A list of `Application` objects."""
  nodes: [Application]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Application` you could get from the connection."""
  totalCount: Int!
}

"""A `Application` edge in the connection."""
type ApplicationsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Application` at the end of the edge."""
  node: Application
}

"""Methods to use when ordering `Application`."""
enum ApplicationsOrderBy {
  ID_ASC
  ID_DESC
  LAST_DEPLOYED_ASC
  LAST_DEPLOYED_DESC
  NAME_ASC
  NAME_DESC
  NATURAL
}

type AwsApplication implements Application {
  awsId: String
  id: Int!
  lastDeployed: Datetime
  name: String!

  """
  Reads a single `Organization` that is related to this `AwsApplication`.
  """
  organizationByOrganizationId: Organization
  organizationId: Int

  """
  Reads a single `PersonOrOrganization` that is related to this `AwsApplication`.
  """
  owner: PersonOrOrganization

  """Reads a single `Person` that is related to this `AwsApplication`."""
  personByPersonId: Person
  personId: Int

  """Reads and enables pagination through a set of `Vulnerability`."""
  vulnerabilities(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: VulnerabilityCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Filter results to only those of the given types"""
    only: [VulnerabilityType!] @deprecated(reason: "EXPERIMENTAL")

    """The method to use when ordering `Vulnerability`."""
    orderBy: [VulnerabilitiesOrderBy!]
  ): VulnerabilitiesConnection!
}

"""
A condition to be used against `AwsApplication` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input AwsApplicationCondition {
  """Checks for equality with the object’s `awsId` field."""
  awsId: String

  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `lastDeployed` field."""
  lastDeployed: Datetime

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `organizationId` field."""
  organizationId: Int

  """Checks for equality with the object’s `personId` field."""
  personId: Int
}

"""An input for mutations affecting `AwsApplication`"""
input AwsApplicationInput {
  awsId: String
  id: Int!
  lastDeployed: Datetime
  name: String!
  organizationId: Int
  personId: Int
}

"""
Represents an update to a `AwsApplication`. Fields that are set will be updated.
"""
input AwsApplicationPatch {
  awsId: String
  id: Int
  lastDeployed: Datetime
  name: String
  organizationId: Int
  personId: Int
}

"""A connection to a list of `AwsApplication` values."""
type AwsApplicationsConnection {
  """
  A list of edges which contains the `AwsApplication` and cursor to aid in pagination.
  """
  edges: [AwsApplicationsEdge]!

  """A list of `AwsApplication` objects."""
  nodes: [AwsApplication]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `AwsApplication` you could get from the connection."""
  totalCount: Int!
}

"""A `AwsApplication` edge in the connection."""
type AwsApplicationsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `AwsApplication` at the end of the edge."""
  node: AwsApplication
}

"""Methods to use when ordering `AwsApplication`."""
enum AwsApplicationsOrderBy {
  AWS_ID_ASC
  AWS_ID_DESC
  ID_ASC
  ID_DESC
  LAST_DEPLOYED_ASC
  LAST_DEPLOYED_DESC
  NAME_ASC
  NAME_DESC
  NATURAL
  ORGANIZATION_ID_ASC
  ORGANIZATION_ID_DESC
  PERSON_ID_ASC
  PERSON_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A signed eight-byte integer. The upper big integer values are greater than the
max value for a JavaScript number. Therefore all big integers will be output as
strings and not numbers.
"""
scalar BigInt

interface Collection {
  col001: String
  col002: String
  col003: String
  col004: String
  col005: String
  col006: String
  col007: String
  col008: String
  col009: String
  col010: String
  col011: String
  col012: String
  col013: String
  col014: String
  col015: String
  col016: String
  col017: String
  col018: String
  col019: String
  col020: String
  col021: String
  col022: String
  col023: String
  col024: String
  col025: String
  col026: String
  col027: String
  col028: String
  col029: String
  col030: String
  col031: String
  col032: String
  col033: String
  col034: String
  col035: String
  col036: String
  col037: String
  col038: String
  col039: String
  col040: String
  col041: String
  col042: String
  col043: String
  col044: String
  col045: String
  col046: String
  col047: String
  col048: String
  col049: String
  col050: String
  col051: String
  col052: String
  col053: String
  col054: String
  col055: String
  col056: String
  col057: String
  col058: String
  col059: String
  col060: String
  col061: String
  col062: String
  col063: String
  col064: String
  col065: String
  col066: String
  col067: String
  col068: String
  col069: String
  col070: String
  col071: String
  col072: String
  col073: String
  col074: String
  col075: String
  col076: String
  col077: String
  col078: String
  col079: String
  col080: String
  col081: String
  col082: String
  col083: String
  col084: String
  col085: String
  col086: String
  col087: String
  col088: String
  col089: String
  col090: String
  col091: String
  col092: String
  col093: String
  col094: String
  col095: String
  col096: String
  col097: String
  col098: String
  col099: String
  col100: String
  createdAt: Datetime
  episodes: Int
  id: String!
  name: String!
  recommendations: JSON
  type: String!
}

"""
A condition to be used against `Collection` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input CollectionCondition {
  """Checks for equality with the object’s `col001` field."""
  col001: String

  """Checks for equality with the object’s `col002` field."""
  col002: String

  """Checks for equality with the object’s `col003` field."""
  col003: String

  """Checks for equality with the object’s `col004` field."""
  col004: String

  """Checks for equality with the object’s `col005` field."""
  col005: String

  """Checks for equality with the object’s `col006` field."""
  col006: String

  """Checks for equality with the object’s `col007` field."""
  col007: String

  """Checks for equality with the object’s `col008` field."""
  col008: String

  """Checks for equality with the object’s `col009` field."""
  col009: String

  """Checks for equality with the object’s `col010` field."""
  col010: String

  """Checks for equality with the object’s `col011` field."""
  col011: String

  """Checks for equality with the object’s `col012` field."""
  col012: String

  """Checks for equality with the object’s `col013` field."""
  col013: String

  """Checks for equality with the object’s `col014` field."""
  col014: String

  """Checks for equality with the object’s `col015` field."""
  col015: String

  """Checks for equality with the object’s `col016` field."""
  col016: String

  """Checks for equality with the object’s `col017` field."""
  col017: String

  """Checks for equality with the object’s `col018` field."""
  col018: String

  """Checks for equality with the object’s `col019` field."""
  col019: String

  """Checks for equality with the object’s `col020` field."""
  col020: String

  """Checks for equality with the object’s `col021` field."""
  col021: String

  """Checks for equality with the object’s `col022` field."""
  col022: String

  """Checks for equality with the object’s `col023` field."""
  col023: String

  """Checks for equality with the object’s `col024` field."""
  col024: String

  """Checks for equality with the object’s `col025` field."""
  col025: String

  """Checks for equality with the object’s `col026` field."""
  col026: String

  """Checks for equality with the object’s `col027` field."""
  col027: String

  """Checks for equality with the object’s `col028` field."""
  col028: String

  """Checks for equality with the object’s `col029` field."""
  col029: String

  """Checks for equality with the object’s `col030` field."""
  col030: String

  """Checks for equality with the object’s `col031` field."""
  col031: String

  """Checks for equality with the object’s `col032` field."""
  col032: String

  """Checks for equality with the object’s `col033` field."""
  col033: String

  """Checks for equality with the object’s `col034` field."""
  col034: String

  """Checks for equality with the object’s `col035` field."""
  col035: String

  """Checks for equality with the object’s `col036` field."""
  col036: String

  """Checks for equality with the object’s `col037` field."""
  col037: String

  """Checks for equality with the object’s `col038` field."""
  col038: String

  """Checks for equality with the object’s `col039` field."""
  col039: String

  """Checks for equality with the object’s `col040` field."""
  col040: String

  """Checks for equality with the object’s `col041` field."""
  col041: String

  """Checks for equality with the object’s `col042` field."""
  col042: String

  """Checks for equality with the object’s `col043` field."""
  col043: String

  """Checks for equality with the object’s `col044` field."""
  col044: String

  """Checks for equality with the object’s `col045` field."""
  col045: String

  """Checks for equality with the object’s `col046` field."""
  col046: String

  """Checks for equality with the object’s `col047` field."""
  col047: String

  """Checks for equality with the object’s `col048` field."""
  col048: String

  """Checks for equality with the object’s `col049` field."""
  col049: String

  """Checks for equality with the object’s `col050` field."""
  col050: String

  """Checks for equality with the object’s `col051` field."""
  col051: String

  """Checks for equality with the object’s `col052` field."""
  col052: String

  """Checks for equality with the object’s `col053` field."""
  col053: String

  """Checks for equality with the object’s `col054` field."""
  col054: String

  """Checks for equality with the object’s `col055` field."""
  col055: String

  """Checks for equality with the object’s `col056` field."""
  col056: String

  """Checks for equality with the object’s `col057` field."""
  col057: String

  """Checks for equality with the object’s `col058` field."""
  col058: String

  """Checks for equality with the object’s `col059` field."""
  col059: String

  """Checks for equality with the object’s `col060` field."""
  col060: String

  """Checks for equality with the object’s `col061` field."""
  col061: String

  """Checks for equality with the object’s `col062` field."""
  col062: String

  """Checks for equality with the object’s `col063` field."""
  col063: String

  """Checks for equality with the object’s `col064` field."""
  col064: String

  """Checks for equality with the object’s `col065` field."""
  col065: String

  """Checks for equality with the object’s `col066` field."""
  col066: String

  """Checks for equality with the object’s `col067` field."""
  col067: String

  """Checks for equality with the object’s `col068` field."""
  col068: String

  """Checks for equality with the object’s `col069` field."""
  col069: String

  """Checks for equality with the object’s `col070` field."""
  col070: String

  """Checks for equality with the object’s `col071` field."""
  col071: String

  """Checks for equality with the object’s `col072` field."""
  col072: String

  """Checks for equality with the object’s `col073` field."""
  col073: String

  """Checks for equality with the object’s `col074` field."""
  col074: String

  """Checks for equality with the object’s `col075` field."""
  col075: String

  """Checks for equality with the object’s `col076` field."""
  col076: String

  """Checks for equality with the object’s `col077` field."""
  col077: String

  """Checks for equality with the object’s `col078` field."""
  col078: String

  """Checks for equality with the object’s `col079` field."""
  col079: String

  """Checks for equality with the object’s `col080` field."""
  col080: String

  """Checks for equality with the object’s `col081` field."""
  col081: String

  """Checks for equality with the object’s `col082` field."""
  col082: String

  """Checks for equality with the object’s `col083` field."""
  col083: String

  """Checks for equality with the object’s `col084` field."""
  col084: String

  """Checks for equality with the object’s `col085` field."""
  col085: String

  """Checks for equality with the object’s `col086` field."""
  col086: String

  """Checks for equality with the object’s `col087` field."""
  col087: String

  """Checks for equality with the object’s `col088` field."""
  col088: String

  """Checks for equality with the object’s `col089` field."""
  col089: String

  """Checks for equality with the object’s `col090` field."""
  col090: String

  """Checks for equality with the object’s `col091` field."""
  col091: String

  """Checks for equality with the object’s `col092` field."""
  col092: String

  """Checks for equality with the object’s `col093` field."""
  col093: String

  """Checks for equality with the object’s `col094` field."""
  col094: String

  """Checks for equality with the object’s `col095` field."""
  col095: String

  """Checks for equality with the object’s `col096` field."""
  col096: String

  """Checks for equality with the object’s `col097` field."""
  col097: String

  """Checks for equality with the object’s `col098` field."""
  col098: String

  """Checks for equality with the object’s `col099` field."""
  col099: String

  """Checks for equality with the object’s `col100` field."""
  col100: String

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `episodes` field."""
  episodes: Int

  """Checks for equality with the object’s `id` field."""
  id: String

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `recommendations` field."""
  recommendations: JSON

  """Checks for equality with the object’s `type` field."""
  type: String
}

"""A connection to a list of `Collection` values."""
type CollectionsConnection {
  """
  A list of edges which contains the `Collection` and cursor to aid in pagination.
  """
  edges: [CollectionsEdge]!

  """A list of `Collection` objects."""
  nodes: [Collection]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Collection` you could get from the connection."""
  totalCount: Int!
}

"""A `Collection` edge in the connection."""
type CollectionsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Collection` at the end of the edge."""
  node: Collection
}

"""Methods to use when ordering `Collection`."""
enum CollectionsOrderBy {
  COL_001_ASC
  COL_001_DESC
  COL_002_ASC
  COL_002_DESC
  COL_003_ASC
  COL_003_DESC
  COL_004_ASC
  COL_004_DESC
  COL_005_ASC
  COL_005_DESC
  COL_006_ASC
  COL_006_DESC
  COL_007_ASC
  COL_007_DESC
  COL_008_ASC
  COL_008_DESC
  COL_009_ASC
  COL_009_DESC
  COL_010_ASC
  COL_010_DESC
  COL_011_ASC
  COL_011_DESC
  COL_012_ASC
  COL_012_DESC
  COL_013_ASC
  COL_013_DESC
  COL_014_ASC
  COL_014_DESC
  COL_015_ASC
  COL_015_DESC
  COL_016_ASC
  COL_016_DESC
  COL_017_ASC
  COL_017_DESC
  COL_018_ASC
  COL_018_DESC
  COL_019_ASC
  COL_019_DESC
  COL_020_ASC
  COL_020_DESC
  COL_021_ASC
  COL_021_DESC
  COL_022_ASC
  COL_022_DESC
  COL_023_ASC
  COL_023_DESC
  COL_024_ASC
  COL_024_DESC
  COL_025_ASC
  COL_025_DESC
  COL_026_ASC
  COL_026_DESC
  COL_027_ASC
  COL_027_DESC
  COL_028_ASC
  COL_028_DESC
  COL_029_ASC
  COL_029_DESC
  COL_030_ASC
  COL_030_DESC
  COL_031_ASC
  COL_031_DESC
  COL_032_ASC
  COL_032_DESC
  COL_033_ASC
  COL_033_DESC
  COL_034_ASC
  COL_034_DESC
  COL_035_ASC
  COL_035_DESC
  COL_036_ASC
  COL_036_DESC
  COL_037_ASC
  COL_037_DESC
  COL_038_ASC
  COL_038_DESC
  COL_039_ASC
  COL_039_DESC
  COL_040_ASC
  COL_040_DESC
  COL_041_ASC
  COL_041_DESC
  COL_042_ASC
  COL_042_DESC
  COL_043_ASC
  COL_043_DESC
  COL_044_ASC
  COL_044_DESC
  COL_045_ASC
  COL_045_DESC
  COL_046_ASC
  COL_046_DESC
  COL_047_ASC
  COL_047_DESC
  COL_048_ASC
  COL_048_DESC
  COL_049_ASC
  COL_049_DESC
  COL_050_ASC
  COL_050_DESC
  COL_051_ASC
  COL_051_DESC
  COL_052_ASC
  COL_052_DESC
  COL_053_ASC
  COL_053_DESC
  COL_054_ASC
  COL_054_DESC
  COL_055_ASC
  COL_055_DESC
  COL_056_ASC
  COL_056_DESC
  COL_057_ASC
  COL_057_DESC
  COL_058_ASC
  COL_058_DESC
  COL_059_ASC
  COL_059_DESC
  COL_060_ASC
  COL_060_DESC
  COL_061_ASC
  COL_061_DESC
  COL_062_ASC
  COL_062_DESC
  COL_063_ASC
  COL_063_DESC
  COL_064_ASC
  COL_064_DESC
  COL_065_ASC
  COL_065_DESC
  COL_066_ASC
  COL_066_DESC
  COL_067_ASC
  COL_067_DESC
  COL_068_ASC
  COL_068_DESC
  COL_069_ASC
  COL_069_DESC
  COL_070_ASC
  COL_070_DESC
  COL_071_ASC
  COL_071_DESC
  COL_072_ASC
  COL_072_DESC
  COL_073_ASC
  COL_073_DESC
  COL_074_ASC
  COL_074_DESC
  COL_075_ASC
  COL_075_DESC
  COL_076_ASC
  COL_076_DESC
  COL_077_ASC
  COL_077_DESC
  COL_078_ASC
  COL_078_DESC
  COL_079_ASC
  COL_079_DESC
  COL_080_ASC
  COL_080_DESC
  COL_081_ASC
  COL_081_DESC
  COL_082_ASC
  COL_082_DESC
  COL_083_ASC
  COL_083_DESC
  COL_084_ASC
  COL_084_DESC
  COL_085_ASC
  COL_085_DESC
  COL_086_ASC
  COL_086_DESC
  COL_087_ASC
  COL_087_DESC
  COL_088_ASC
  COL_088_DESC
  COL_089_ASC
  COL_089_DESC
  COL_090_ASC
  COL_090_DESC
  COL_091_ASC
  COL_091_DESC
  COL_092_ASC
  COL_092_DESC
  COL_093_ASC
  COL_093_DESC
  COL_094_ASC
  COL_094_DESC
  COL_095_ASC
  COL_095_DESC
  COL_096_ASC
  COL_096_DESC
  COL_097_ASC
  COL_097_DESC
  COL_098_ASC
  COL_098_DESC
  COL_099_ASC
  COL_099_DESC
  COL_100_ASC
  COL_100_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  EPISODES_ASC
  EPISODES_DESC
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  RECOMMENDATIONS_ASC
  RECOMMENDATIONS_DESC
  TYPE_ASC
  TYPE_DESC
}

"""All input for the create `AwsApplication` mutation."""
input CreateAwsApplicationInput {
  """The `AwsApplication` to be created by this mutation."""
  awsApplication: AwsApplicationInput!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our create `AwsApplication` mutation."""
type CreateAwsApplicationPayload {
  """The `AwsApplication` that was created by this mutation."""
  awsApplication: AwsApplication

  """An edge for our `AwsApplication`. May be used by Relay 1."""
  awsApplicationEdge(
    """The method to use when ordering `AwsApplication`."""
    orderBy: [AwsApplicationsOrderBy!]! = [PRIMARY_KEY_ASC]
  ): AwsApplicationsEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Reads a single `Organization` that is related to this `AwsApplication`.
  """
  organizationByOrganizationId: Organization

  """Reads a single `Person` that is related to this `AwsApplication`."""
  personByPersonId: Person

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `FirstPartyVulnerability` mutation."""
input CreateFirstPartyVulnerabilityInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `FirstPartyVulnerability` to be created by this mutation."""
  firstPartyVulnerability: FirstPartyVulnerabilityInput!
}

"""The output of our create `FirstPartyVulnerability` mutation."""
type CreateFirstPartyVulnerabilityPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `FirstPartyVulnerability` that was created by this mutation."""
  firstPartyVulnerability: FirstPartyVulnerability

  """An edge for our `FirstPartyVulnerability`. May be used by Relay 1."""
  firstPartyVulnerabilityEdge(
    """The method to use when ordering `FirstPartyVulnerability`."""
    orderBy: [FirstPartyVulnerabilitiesOrderBy!]! = [PRIMARY_KEY_ASC]
  ): FirstPartyVulnerabilitiesEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `GcpApplication` mutation."""
input CreateGcpApplicationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `GcpApplication` to be created by this mutation."""
  gcpApplication: GcpApplicationInput!
}

"""The output of our create `GcpApplication` mutation."""
type CreateGcpApplicationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `GcpApplication` that was created by this mutation."""
  gcpApplication: GcpApplication

  """An edge for our `GcpApplication`. May be used by Relay 1."""
  gcpApplicationEdge(
    """The method to use when ordering `GcpApplication`."""
    orderBy: [GcpApplicationsOrderBy!]! = [PRIMARY_KEY_ASC]
  ): GcpApplicationsEdge

  """
  Reads a single `Organization` that is related to this `GcpApplication`.
  """
  organizationByOrganizationId: Organization

  """Reads a single `Person` that is related to this `GcpApplication`."""
  personByPersonId: Person

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `LogEntry` mutation."""
input CreateLogEntryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `LogEntry` to be created by this mutation."""
  logEntry: LogEntryInput!
}

"""The output of our create `LogEntry` mutation."""
type CreateLogEntryPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `LogEntry` that was created by this mutation."""
  logEntry: LogEntry

  """An edge for our `LogEntry`. May be used by Relay 1."""
  logEntryEdge(
    """The method to use when ordering `LogEntry`."""
    orderBy: [LogEntriesOrderBy!]! = [PRIMARY_KEY_ASC]
  ): LogEntriesEdge

  """Reads a single `Organization` that is related to this `LogEntry`."""
  organizationByOrganizationId: Organization

  """Reads a single `Person` that is related to this `LogEntry`."""
  personByPersonId: Person

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `Organization` mutation."""
input CreateOrganizationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Organization` to be created by this mutation."""
  organization: OrganizationInput!
}

"""The output of our create `Organization` mutation."""
type CreateOrganizationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Organization` that was created by this mutation."""
  organization: Organization

  """An edge for our `Organization`. May be used by Relay 1."""
  organizationEdge(
    """The method to use when ordering `Organization`."""
    orderBy: [OrganizationsOrderBy!]! = [PRIMARY_KEY_ASC]
  ): OrganizationsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `Person` mutation."""
input CreatePersonInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Person` to be created by this mutation."""
  person: PersonInput!
}

"""The output of our create `Person` mutation."""
type CreatePersonPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Person` that was created by this mutation."""
  person: Person

  """An edge for our `Person`. May be used by Relay 1."""
  personEdge(
    """The method to use when ordering `Person`."""
    orderBy: [PeopleOrderBy!]! = [PRIMARY_KEY_ASC]
  ): PeopleEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `RelationalItemRelationCompositePk` mutation."""
input CreateRelationalItemRelationCompositePkInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The `RelationalItemRelationCompositePk` to be created by this mutation.
  """
  relationalItemRelationCompositePk: RelationalItemRelationCompositePkInput!
}

"""The output of our create `RelationalItemRelationCompositePk` mutation."""
type CreateRelationalItemRelationCompositePkPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `RelationalItem` that is related to this `RelationalItemRelationCompositePk`.
  """
  relationalItemByChildId: RelationalItem

  """
  Reads a single `RelationalItem` that is related to this `RelationalItemRelationCompositePk`.
  """
  relationalItemByParentId: RelationalItem

  """
  The `RelationalItemRelationCompositePk` that was created by this mutation.
  """
  relationalItemRelationCompositePk: RelationalItemRelationCompositePk

  """
  An edge for our `RelationalItemRelationCompositePk`. May be used by Relay 1.
  """
  relationalItemRelationCompositePkEdge(
    """The method to use when ordering `RelationalItemRelationCompositePk`."""
    orderBy: [RelationalItemRelationCompositePksOrderBy!]! = [PRIMARY_KEY_ASC]
  ): RelationalItemRelationCompositePksEdge
}

"""All input for the create `RelationalItemRelation` mutation."""
input CreateRelationalItemRelationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `RelationalItemRelation` to be created by this mutation."""
  relationalItemRelation: RelationalItemRelationInput!
}

"""The output of our create `RelationalItemRelation` mutation."""
type CreateRelationalItemRelationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `RelationalItem` that is related to this `RelationalItemRelation`.
  """
  relationalItemByChildId: RelationalItem

  """
  Reads a single `RelationalItem` that is related to this `RelationalItemRelation`.
  """
  relationalItemByParentId: RelationalItem

  """The `RelationalItemRelation` that was created by this mutation."""
  relationalItemRelation: RelationalItemRelation

  """An edge for our `RelationalItemRelation`. May be used by Relay 1."""
  relationalItemRelationEdge(
    """The method to use when ordering `RelationalItemRelation`."""
    orderBy: [RelationalItemRelationsOrderBy!]! = [PRIMARY_KEY_ASC]
  ): RelationalItemRelationsEdge
}

"""
All input for the create `SingleTableItemRelationCompositePk` mutation.
"""
input CreateSingleTableItemRelationCompositePkInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The `SingleTableItemRelationCompositePk` to be created by this mutation.
  """
  singleTableItemRelationCompositePk: SingleTableItemRelationCompositePkInput!
}

"""
The output of our create `SingleTableItemRelationCompositePk` mutation.
"""
type CreateSingleTableItemRelationCompositePkPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `SingleTableItem` that is related to this `SingleTableItemRelationCompositePk`.
  """
  singleTableItemByChildId: SingleTableItem

  """
  Reads a single `SingleTableItem` that is related to this `SingleTableItemRelationCompositePk`.
  """
  singleTableItemByParentId: SingleTableItem

  """
  The `SingleTableItemRelationCompositePk` that was created by this mutation.
  """
  singleTableItemRelationCompositePk: SingleTableItemRelationCompositePk

  """
  An edge for our `SingleTableItemRelationCompositePk`. May be used by Relay 1.
  """
  singleTableItemRelationCompositePkEdge(
    """The method to use when ordering `SingleTableItemRelationCompositePk`."""
    orderBy: [SingleTableItemRelationCompositePksOrderBy!]! = [PRIMARY_KEY_ASC]
  ): SingleTableItemRelationCompositePksEdge
}

"""All input for the create `SingleTableItemRelation` mutation."""
input CreateSingleTableItemRelationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `SingleTableItemRelation` to be created by this mutation."""
  singleTableItemRelation: SingleTableItemRelationInput!
}

"""The output of our create `SingleTableItemRelation` mutation."""
type CreateSingleTableItemRelationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `SingleTableItem` that is related to this `SingleTableItemRelation`.
  """
  singleTableItemByChildId: SingleTableItem

  """
  Reads a single `SingleTableItem` that is related to this `SingleTableItemRelation`.
  """
  singleTableItemByParentId: SingleTableItem

  """The `SingleTableItemRelation` that was created by this mutation."""
  singleTableItemRelation: SingleTableItemRelation

  """An edge for our `SingleTableItemRelation`. May be used by Relay 1."""
  singleTableItemRelationEdge(
    """The method to use when ordering `SingleTableItemRelation`."""
    orderBy: [SingleTableItemRelationsOrderBy!]! = [PRIMARY_KEY_ASC]
  ): SingleTableItemRelationsEdge
}

"""All input for the create `ThirdPartyVulnerability` mutation."""
input CreateThirdPartyVulnerabilityInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `ThirdPartyVulnerability` to be created by this mutation."""
  thirdPartyVulnerability: ThirdPartyVulnerabilityInput!
}

"""The output of our create `ThirdPartyVulnerability` mutation."""
type CreateThirdPartyVulnerabilityPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `ThirdPartyVulnerability` that was created by this mutation."""
  thirdPartyVulnerability: ThirdPartyVulnerability

  """An edge for our `ThirdPartyVulnerability`. May be used by Relay 1."""
  thirdPartyVulnerabilityEdge(
    """The method to use when ordering `ThirdPartyVulnerability`."""
    orderBy: [ThirdPartyVulnerabilitiesOrderBy!]! = [PRIMARY_KEY_ASC]
  ): ThirdPartyVulnerabilitiesEdge
}

"""A location in a connection that can be used for resuming pagination."""
scalar Cursor

"""
A point in time as described by the [ISO
8601](https://en.wikipedia.org/wiki/ISO_8601) and, if it has a timezone, [RFC
3339](https://datatracker.ietf.org/doc/html/rfc3339) standards. Input values
that do not conform to both ISO 8601 and RFC 3339 may be coerced, which may lead
to unexpected results.
"""
scalar Datetime

"""All input for the `deleteAwsApplicationById` mutation."""
input DeleteAwsApplicationByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""The output of our delete `AwsApplication` mutation."""
type DeleteAwsApplicationPayload {
  """The `AwsApplication` that was deleted by this mutation."""
  awsApplication: AwsApplication

  """An edge for our `AwsApplication`. May be used by Relay 1."""
  awsApplicationEdge(
    """The method to use when ordering `AwsApplication`."""
    orderBy: [AwsApplicationsOrderBy!]! = [PRIMARY_KEY_ASC]
  ): AwsApplicationsEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Reads a single `Organization` that is related to this `AwsApplication`.
  """
  organizationByOrganizationId: Organization

  """Reads a single `Person` that is related to this `AwsApplication`."""
  personByPersonId: Person

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteFirstPartyVulnerabilityById` mutation."""
input DeleteFirstPartyVulnerabilityByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""The output of our delete `FirstPartyVulnerability` mutation."""
type DeleteFirstPartyVulnerabilityPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `FirstPartyVulnerability` that was deleted by this mutation."""
  firstPartyVulnerability: FirstPartyVulnerability

  """An edge for our `FirstPartyVulnerability`. May be used by Relay 1."""
  firstPartyVulnerabilityEdge(
    """The method to use when ordering `FirstPartyVulnerability`."""
    orderBy: [FirstPartyVulnerabilitiesOrderBy!]! = [PRIMARY_KEY_ASC]
  ): FirstPartyVulnerabilitiesEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteGcpApplicationById` mutation."""
input DeleteGcpApplicationByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""The output of our delete `GcpApplication` mutation."""
type DeleteGcpApplicationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `GcpApplication` that was deleted by this mutation."""
  gcpApplication: GcpApplication

  """An edge for our `GcpApplication`. May be used by Relay 1."""
  gcpApplicationEdge(
    """The method to use when ordering `GcpApplication`."""
    orderBy: [GcpApplicationsOrderBy!]! = [PRIMARY_KEY_ASC]
  ): GcpApplicationsEdge

  """
  Reads a single `Organization` that is related to this `GcpApplication`.
  """
  organizationByOrganizationId: Organization

  """Reads a single `Person` that is related to this `GcpApplication`."""
  personByPersonId: Person

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteLogEntryById` mutation."""
input DeleteLogEntryByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""The output of our delete `LogEntry` mutation."""
type DeleteLogEntryPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `LogEntry` that was deleted by this mutation."""
  logEntry: LogEntry

  """An edge for our `LogEntry`. May be used by Relay 1."""
  logEntryEdge(
    """The method to use when ordering `LogEntry`."""
    orderBy: [LogEntriesOrderBy!]! = [PRIMARY_KEY_ASC]
  ): LogEntriesEdge

  """Reads a single `Organization` that is related to this `LogEntry`."""
  organizationByOrganizationId: Organization

  """Reads a single `Person` that is related to this `LogEntry`."""
  personByPersonId: Person

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteOrganizationByName` mutation."""
input DeleteOrganizationByNameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  name: String!
}

"""All input for the `deleteOrganizationByOrganizationId` mutation."""
input DeleteOrganizationByOrganizationIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  organizationId: Int!
}

"""The output of our delete `Organization` mutation."""
type DeleteOrganizationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Organization` that was deleted by this mutation."""
  organization: Organization

  """An edge for our `Organization`. May be used by Relay 1."""
  organizationEdge(
    """The method to use when ordering `Organization`."""
    orderBy: [OrganizationsOrderBy!]! = [PRIMARY_KEY_ASC]
  ): OrganizationsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deletePersonByPersonId` mutation."""
input DeletePersonByPersonIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  personId: Int!
}

"""All input for the `deletePersonByUsername` mutation."""
input DeletePersonByUsernameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  username: String!
}

"""The output of our delete `Person` mutation."""
type DeletePersonPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Person` that was deleted by this mutation."""
  person: Person

  """An edge for our `Person`. May be used by Relay 1."""
  personEdge(
    """The method to use when ordering `Person`."""
    orderBy: [PeopleOrderBy!]! = [PRIMARY_KEY_ASC]
  ): PeopleEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteRelationalItemRelationById` mutation."""
input DeleteRelationalItemRelationByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""
All input for the `deleteRelationalItemRelationByParentIdAndChildId` mutation.
"""
input DeleteRelationalItemRelationByParentIdAndChildIdInput {
  childId: Int!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  parentId: Int!
}

"""
All input for the `deleteRelationalItemRelationCompositePkByParentIdAndChildId` mutation.
"""
input DeleteRelationalItemRelationCompositePkByParentIdAndChildIdInput {
  childId: Int!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  parentId: Int!
}

"""The output of our delete `RelationalItemRelationCompositePk` mutation."""
type DeleteRelationalItemRelationCompositePkPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `RelationalItem` that is related to this `RelationalItemRelationCompositePk`.
  """
  relationalItemByChildId: RelationalItem

  """
  Reads a single `RelationalItem` that is related to this `RelationalItemRelationCompositePk`.
  """
  relationalItemByParentId: RelationalItem

  """
  The `RelationalItemRelationCompositePk` that was deleted by this mutation.
  """
  relationalItemRelationCompositePk: RelationalItemRelationCompositePk

  """
  An edge for our `RelationalItemRelationCompositePk`. May be used by Relay 1.
  """
  relationalItemRelationCompositePkEdge(
    """The method to use when ordering `RelationalItemRelationCompositePk`."""
    orderBy: [RelationalItemRelationCompositePksOrderBy!]! = [PRIMARY_KEY_ASC]
  ): RelationalItemRelationCompositePksEdge
}

"""The output of our delete `RelationalItemRelation` mutation."""
type DeleteRelationalItemRelationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `RelationalItem` that is related to this `RelationalItemRelation`.
  """
  relationalItemByChildId: RelationalItem

  """
  Reads a single `RelationalItem` that is related to this `RelationalItemRelation`.
  """
  relationalItemByParentId: RelationalItem

  """The `RelationalItemRelation` that was deleted by this mutation."""
  relationalItemRelation: RelationalItemRelation

  """An edge for our `RelationalItemRelation`. May be used by Relay 1."""
  relationalItemRelationEdge(
    """The method to use when ordering `RelationalItemRelation`."""
    orderBy: [RelationalItemRelationsOrderBy!]! = [PRIMARY_KEY_ASC]
  ): RelationalItemRelationsEdge
}

"""All input for the `deleteSingleTableItemRelationById` mutation."""
input DeleteSingleTableItemRelationByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""
All input for the `deleteSingleTableItemRelationByParentIdAndChildId` mutation.
"""
input DeleteSingleTableItemRelationByParentIdAndChildIdInput {
  childId: Int!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  parentId: Int!
}

"""
All input for the `deleteSingleTableItemRelationCompositePkByParentIdAndChildId` mutation.
"""
input DeleteSingleTableItemRelationCompositePkByParentIdAndChildIdInput {
  childId: Int!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  parentId: Int!
}

"""
The output of our delete `SingleTableItemRelationCompositePk` mutation.
"""
type DeleteSingleTableItemRelationCompositePkPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `SingleTableItem` that is related to this `SingleTableItemRelationCompositePk`.
  """
  singleTableItemByChildId: SingleTableItem

  """
  Reads a single `SingleTableItem` that is related to this `SingleTableItemRelationCompositePk`.
  """
  singleTableItemByParentId: SingleTableItem

  """
  The `SingleTableItemRelationCompositePk` that was deleted by this mutation.
  """
  singleTableItemRelationCompositePk: SingleTableItemRelationCompositePk

  """
  An edge for our `SingleTableItemRelationCompositePk`. May be used by Relay 1.
  """
  singleTableItemRelationCompositePkEdge(
    """The method to use when ordering `SingleTableItemRelationCompositePk`."""
    orderBy: [SingleTableItemRelationCompositePksOrderBy!]! = [PRIMARY_KEY_ASC]
  ): SingleTableItemRelationCompositePksEdge
}

"""The output of our delete `SingleTableItemRelation` mutation."""
type DeleteSingleTableItemRelationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `SingleTableItem` that is related to this `SingleTableItemRelation`.
  """
  singleTableItemByChildId: SingleTableItem

  """
  Reads a single `SingleTableItem` that is related to this `SingleTableItemRelation`.
  """
  singleTableItemByParentId: SingleTableItem

  """The `SingleTableItemRelation` that was deleted by this mutation."""
  singleTableItemRelation: SingleTableItemRelation

  """An edge for our `SingleTableItemRelation`. May be used by Relay 1."""
  singleTableItemRelationEdge(
    """The method to use when ordering `SingleTableItemRelation`."""
    orderBy: [SingleTableItemRelationsOrderBy!]! = [PRIMARY_KEY_ASC]
  ): SingleTableItemRelationsEdge
}

"""All input for the `deleteThirdPartyVulnerabilityById` mutation."""
input DeleteThirdPartyVulnerabilityByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""The output of our delete `ThirdPartyVulnerability` mutation."""
type DeleteThirdPartyVulnerabilityPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `ThirdPartyVulnerability` that was deleted by this mutation."""
  thirdPartyVulnerability: ThirdPartyVulnerability

  """An edge for our `ThirdPartyVulnerability`. May be used by Relay 1."""
  thirdPartyVulnerabilityEdge(
    """The method to use when ordering `ThirdPartyVulnerability`."""
    orderBy: [ThirdPartyVulnerabilitiesOrderBy!]! = [PRIMARY_KEY_ASC]
  ): ThirdPartyVulnerabilitiesEdge
}

"""A connection to a list of `FirstPartyVulnerability` values."""
type FirstPartyVulnerabilitiesConnection {
  """
  A list of edges which contains the `FirstPartyVulnerability` and cursor to aid in pagination.
  """
  edges: [FirstPartyVulnerabilitiesEdge]!

  """A list of `FirstPartyVulnerability` objects."""
  nodes: [FirstPartyVulnerability]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `FirstPartyVulnerability` you could get from the connection.
  """
  totalCount: Int!
}

"""A `FirstPartyVulnerability` edge in the connection."""
type FirstPartyVulnerabilitiesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `FirstPartyVulnerability` at the end of the edge."""
  node: FirstPartyVulnerability
}

"""Methods to use when ordering `FirstPartyVulnerability`."""
enum FirstPartyVulnerabilitiesOrderBy {
  CVSS_SCORE_ASC
  CVSS_SCORE_DESC
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  TEAM_NAME_ASC
  TEAM_NAME_DESC
}

type FirstPartyVulnerability implements Vulnerability {
  """Reads and enables pagination through a set of `Application`."""
  applications(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Filter results to only those of the given types"""
    only: [ApplicationType!] @deprecated(reason: "EXPERIMENTAL")

    """The method to use when ordering `Application`."""
    orderBy: [ApplicationsOrderBy!]
  ): ApplicationsConnection!
  cvssScore: Float!
  cvssScoreInt: Int
  id: Int!
  name: String!

  """Reads and enables pagination through a set of `PersonOrOrganization`."""
  owners: PersonOrOrganizationConnection!
  teamName: String
}

"""
A condition to be used against `FirstPartyVulnerability` object types. All
fields are tested for equality and combined with a logical ‘and.’
"""
input FirstPartyVulnerabilityCondition {
  """Checks for equality with the object’s `cvssScore` field."""
  cvssScore: Float

  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `teamName` field."""
  teamName: String
}

"""An input for mutations affecting `FirstPartyVulnerability`"""
input FirstPartyVulnerabilityInput {
  cvssScore: Float!
  id: Int!
  name: String!
  teamName: String
}

"""
Represents an update to a `FirstPartyVulnerability`. Fields that are set will be updated.
"""
input FirstPartyVulnerabilityPatch {
  cvssScore: Float
  id: Int
  name: String
  teamName: String
}

type GcpApplication implements Application {
  gcpId: String
  id: Int!
  lastDeployed: Datetime
  name: String!

  """
  Reads a single `Organization` that is related to this `GcpApplication`.
  """
  organizationByOrganizationId: Organization
  organizationId: Int

  """
  Reads a single `PersonOrOrganization` that is related to this `GcpApplication`.
  """
  owner: PersonOrOrganization

  """Reads a single `Person` that is related to this `GcpApplication`."""
  personByPersonId: Person
  personId: Int

  """Reads and enables pagination through a set of `Vulnerability`."""
  vulnerabilities(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: VulnerabilityCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Filter results to only those of the given types"""
    only: [VulnerabilityType!] @deprecated(reason: "EXPERIMENTAL")

    """The method to use when ordering `Vulnerability`."""
    orderBy: [VulnerabilitiesOrderBy!]
  ): VulnerabilitiesConnection!
}

"""
A condition to be used against `GcpApplication` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input GcpApplicationCondition {
  """Checks for equality with the object’s `gcpId` field."""
  gcpId: String

  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `lastDeployed` field."""
  lastDeployed: Datetime

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `organizationId` field."""
  organizationId: Int

  """Checks for equality with the object’s `personId` field."""
  personId: Int
}

"""An input for mutations affecting `GcpApplication`"""
input GcpApplicationInput {
  gcpId: String
  id: Int!
  lastDeployed: Datetime
  name: String!
  organizationId: Int
  personId: Int
}

"""
Represents an update to a `GcpApplication`. Fields that are set will be updated.
"""
input GcpApplicationPatch {
  gcpId: String
  id: Int
  lastDeployed: Datetime
  name: String
  organizationId: Int
  personId: Int
}

"""A connection to a list of `GcpApplication` values."""
type GcpApplicationsConnection {
  """
  A list of edges which contains the `GcpApplication` and cursor to aid in pagination.
  """
  edges: [GcpApplicationsEdge]!

  """A list of `GcpApplication` objects."""
  nodes: [GcpApplication]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `GcpApplication` you could get from the connection."""
  totalCount: Int!
}

"""A `GcpApplication` edge in the connection."""
type GcpApplicationsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `GcpApplication` at the end of the edge."""
  node: GcpApplication
}

"""Methods to use when ordering `GcpApplication`."""
enum GcpApplicationsOrderBy {
  GCP_ID_ASC
  GCP_ID_DESC
  ID_ASC
  ID_DESC
  LAST_DEPLOYED_ASC
  LAST_DEPLOYED_DESC
  NAME_ASC
  NAME_DESC
  NATURAL
  ORGANIZATION_ID_ASC
  ORGANIZATION_ID_DESC
  PERSON_ID_ASC
  PERSON_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

enum ItemType {
  CHECKLIST
  CHECKLIST_ITEM
  DIVIDER
  POST
  TOPIC
}

"""
A JavaScript object encoded in the JSON format as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

"""A connection to a list of `LogEntry` values."""
type LogEntriesConnection {
  """
  A list of edges which contains the `LogEntry` and cursor to aid in pagination.
  """
  edges: [LogEntriesEdge]!

  """A list of `LogEntry` objects."""
  nodes: [LogEntry]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `LogEntry` you could get from the connection."""
  totalCount: Int!
}

"""A `LogEntry` edge in the connection."""
type LogEntriesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `LogEntry` at the end of the edge."""
  node: LogEntry
}

"""Methods to use when ordering `LogEntry`."""
enum LogEntriesOrderBy {
  ID_ASC
  ID_DESC
  NATURAL
  ORGANIZATION_ID_ASC
  ORGANIZATION_ID_DESC
  PERSON_ID_ASC
  PERSON_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  TEXT_ASC
  TEXT_DESC
}

type LogEntry {
  """
  Reads a single `PersonOrOrganization` that is related to this `LogEntry`.
  """
  author: PersonOrOrganization
  id: Int!

  """Reads a single `Organization` that is related to this `LogEntry`."""
  organizationByOrganizationId: Organization
  organizationId: Int

  """Reads a single `Person` that is related to this `LogEntry`."""
  personByPersonId: Person
  personId: Int
  text: String!
}

"""
A condition to be used against `LogEntry` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input LogEntryCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `organizationId` field."""
  organizationId: Int

  """Checks for equality with the object’s `personId` field."""
  personId: Int

  """Checks for equality with the object’s `text` field."""
  text: String
}

"""An input for mutations affecting `LogEntry`"""
input LogEntryInput {
  id: Int
  organizationId: Int
  personId: Int
  text: String!
}

"""
Represents an update to a `LogEntry`. Fields that are set will be updated.
"""
input LogEntryPatch {
  id: Int
  organizationId: Int
  personId: Int
  text: String
}

type MovieCollection implements Collection {
  col001: String
  col002: String
  col003: String
  col004: String
  col005: String
  col006: String
  col007: String
  col008: String
  col009: String
  col010: String
  col011: String
  col012: String
  col013: String
  col014: String
  col015: String
  col016: String
  col017: String
  col018: String
  col019: String
  col020: String
  col021: String
  col022: String
  col023: String
  col024: String
  col025: String
  col026: String
  col027: String
  col028: String
  col029: String
  col030: String
  col031: String
  col032: String
  col033: String
  col034: String
  col035: String
  col036: String
  col037: String
  col038: String
  col039: String
  col040: String
  col041: String
  col042: String
  col043: String
  col044: String
  col045: String
  col046: String
  col047: String
  col048: String
  col049: String
  col050: String
  col051: String
  col052: String
  col053: String
  col054: String
  col055: String
  col056: String
  col057: String
  col058: String
  col059: String
  col060: String
  col061: String
  col062: String
  col063: String
  col064: String
  col065: String
  col066: String
  col067: String
  col068: String
  col069: String
  col070: String
  col071: String
  col072: String
  col073: String
  col074: String
  col075: String
  col076: String
  col077: String
  col078: String
  col079: String
  col080: String
  col081: String
  col082: String
  col083: String
  col084: String
  col085: String
  col086: String
  col087: String
  col088: String
  col089: String
  col090: String
  col091: String
  col092: String
  col093: String
  col094: String
  col095: String
  col096: String
  col097: String
  col098: String
  col099: String
  col100: String
  createdAt: Datetime
  episodes: Int
  id: String!
  name: String!
  recommendations: JSON
  type: String!
}

"""
The root mutation type which contains root level fields which mutate data.
"""
type Mutation {
  """Creates a single `AwsApplication`."""
  createAwsApplication(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateAwsApplicationInput!
  ): CreateAwsApplicationPayload

  """Creates a single `FirstPartyVulnerability`."""
  createFirstPartyVulnerability(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateFirstPartyVulnerabilityInput!
  ): CreateFirstPartyVulnerabilityPayload

  """Creates a single `GcpApplication`."""
  createGcpApplication(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateGcpApplicationInput!
  ): CreateGcpApplicationPayload

  """Creates a single `LogEntry`."""
  createLogEntry(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateLogEntryInput!
  ): CreateLogEntryPayload

  """Creates a single `Organization`."""
  createOrganization(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateOrganizationInput!
  ): CreateOrganizationPayload

  """Creates a single `Person`."""
  createPerson(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreatePersonInput!
  ): CreatePersonPayload

  """Creates a single `RelationalItemRelation`."""
  createRelationalItemRelation(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateRelationalItemRelationInput!
  ): CreateRelationalItemRelationPayload

  """Creates a single `RelationalItemRelationCompositePk`."""
  createRelationalItemRelationCompositePk(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateRelationalItemRelationCompositePkInput!
  ): CreateRelationalItemRelationCompositePkPayload

  """Creates a single `SingleTableItemRelation`."""
  createSingleTableItemRelation(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateSingleTableItemRelationInput!
  ): CreateSingleTableItemRelationPayload

  """Creates a single `SingleTableItemRelationCompositePk`."""
  createSingleTableItemRelationCompositePk(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateSingleTableItemRelationCompositePkInput!
  ): CreateSingleTableItemRelationCompositePkPayload

  """Creates a single `ThirdPartyVulnerability`."""
  createThirdPartyVulnerability(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateThirdPartyVulnerabilityInput!
  ): CreateThirdPartyVulnerabilityPayload

  """Deletes a single `AwsApplication` using a unique key."""
  deleteAwsApplicationById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteAwsApplicationByIdInput!
  ): DeleteAwsApplicationPayload

  """Deletes a single `FirstPartyVulnerability` using a unique key."""
  deleteFirstPartyVulnerabilityById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFirstPartyVulnerabilityByIdInput!
  ): DeleteFirstPartyVulnerabilityPayload

  """Deletes a single `GcpApplication` using a unique key."""
  deleteGcpApplicationById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteGcpApplicationByIdInput!
  ): DeleteGcpApplicationPayload

  """Deletes a single `LogEntry` using a unique key."""
  deleteLogEntryById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteLogEntryByIdInput!
  ): DeleteLogEntryPayload

  """Deletes a single `Organization` using a unique key."""
  deleteOrganizationByName(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteOrganizationByNameInput!
  ): DeleteOrganizationPayload

  """Deletes a single `Organization` using a unique key."""
  deleteOrganizationByOrganizationId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteOrganizationByOrganizationIdInput!
  ): DeleteOrganizationPayload

  """Deletes a single `Person` using a unique key."""
  deletePersonByPersonId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeletePersonByPersonIdInput!
  ): DeletePersonPayload

  """Deletes a single `Person` using a unique key."""
  deletePersonByUsername(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeletePersonByUsernameInput!
  ): DeletePersonPayload

  """Deletes a single `RelationalItemRelation` using a unique key."""
  deleteRelationalItemRelationById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteRelationalItemRelationByIdInput!
  ): DeleteRelationalItemRelationPayload

  """Deletes a single `RelationalItemRelation` using a unique key."""
  deleteRelationalItemRelationByParentIdAndChildId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteRelationalItemRelationByParentIdAndChildIdInput!
  ): DeleteRelationalItemRelationPayload

  """
  Deletes a single `RelationalItemRelationCompositePk` using a unique key.
  """
  deleteRelationalItemRelationCompositePkByParentIdAndChildId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteRelationalItemRelationCompositePkByParentIdAndChildIdInput!
  ): DeleteRelationalItemRelationCompositePkPayload

  """Deletes a single `SingleTableItemRelation` using a unique key."""
  deleteSingleTableItemRelationById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSingleTableItemRelationByIdInput!
  ): DeleteSingleTableItemRelationPayload

  """Deletes a single `SingleTableItemRelation` using a unique key."""
  deleteSingleTableItemRelationByParentIdAndChildId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSingleTableItemRelationByParentIdAndChildIdInput!
  ): DeleteSingleTableItemRelationPayload

  """
  Deletes a single `SingleTableItemRelationCompositePk` using a unique key.
  """
  deleteSingleTableItemRelationCompositePkByParentIdAndChildId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSingleTableItemRelationCompositePkByParentIdAndChildIdInput!
  ): DeleteSingleTableItemRelationCompositePkPayload

  """Deletes a single `ThirdPartyVulnerability` using a unique key."""
  deleteThirdPartyVulnerabilityById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteThirdPartyVulnerabilityByIdInput!
  ): DeleteThirdPartyVulnerabilityPayload

  """Updates a single `AwsApplication` using a unique key and a patch."""
  updateAwsApplicationById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateAwsApplicationByIdInput!
  ): UpdateAwsApplicationPayload

  """
  Updates a single `FirstPartyVulnerability` using a unique key and a patch.
  """
  updateFirstPartyVulnerabilityById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFirstPartyVulnerabilityByIdInput!
  ): UpdateFirstPartyVulnerabilityPayload

  """Updates a single `GcpApplication` using a unique key and a patch."""
  updateGcpApplicationById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateGcpApplicationByIdInput!
  ): UpdateGcpApplicationPayload

  """Updates a single `LogEntry` using a unique key and a patch."""
  updateLogEntryById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateLogEntryByIdInput!
  ): UpdateLogEntryPayload

  """Updates a single `Organization` using a unique key and a patch."""
  updateOrganizationByName(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateOrganizationByNameInput!
  ): UpdateOrganizationPayload

  """Updates a single `Organization` using a unique key and a patch."""
  updateOrganizationByOrganizationId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateOrganizationByOrganizationIdInput!
  ): UpdateOrganizationPayload

  """Updates a single `Person` using a unique key and a patch."""
  updatePersonByPersonId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdatePersonByPersonIdInput!
  ): UpdatePersonPayload

  """Updates a single `Person` using a unique key and a patch."""
  updatePersonByUsername(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdatePersonByUsernameInput!
  ): UpdatePersonPayload

  """
  Updates a single `RelationalItemRelation` using a unique key and a patch.
  """
  updateRelationalItemRelationById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateRelationalItemRelationByIdInput!
  ): UpdateRelationalItemRelationPayload

  """
  Updates a single `RelationalItemRelation` using a unique key and a patch.
  """
  updateRelationalItemRelationByParentIdAndChildId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateRelationalItemRelationByParentIdAndChildIdInput!
  ): UpdateRelationalItemRelationPayload

  """
  Updates a single `RelationalItemRelationCompositePk` using a unique key and a patch.
  """
  updateRelationalItemRelationCompositePkByParentIdAndChildId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateRelationalItemRelationCompositePkByParentIdAndChildIdInput!
  ): UpdateRelationalItemRelationCompositePkPayload

  """
  Updates a single `SingleTableItemRelation` using a unique key and a patch.
  """
  updateSingleTableItemRelationById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSingleTableItemRelationByIdInput!
  ): UpdateSingleTableItemRelationPayload

  """
  Updates a single `SingleTableItemRelation` using a unique key and a patch.
  """
  updateSingleTableItemRelationByParentIdAndChildId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSingleTableItemRelationByParentIdAndChildIdInput!
  ): UpdateSingleTableItemRelationPayload

  """
  Updates a single `SingleTableItemRelationCompositePk` using a unique key and a patch.
  """
  updateSingleTableItemRelationCompositePkByParentIdAndChildId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSingleTableItemRelationCompositePkByParentIdAndChildIdInput!
  ): UpdateSingleTableItemRelationCompositePkPayload

  """
  Updates a single `ThirdPartyVulnerability` using a unique key and a patch.
  """
  updateThirdPartyVulnerabilityById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateThirdPartyVulnerabilityByIdInput!
  ): UpdateThirdPartyVulnerabilityPayload
}

type Organization {
  """Reads and enables pagination through a set of `AwsApplication`."""
  awsApplicationsByOrganizationId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AwsApplicationCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `AwsApplication`."""
    orderBy: [AwsApplicationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): AwsApplicationsConnection!

  """Reads and enables pagination through a set of `GcpApplication`."""
  gcpApplicationsByOrganizationId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GcpApplicationCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `GcpApplication`."""
    orderBy: [GcpApplicationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): GcpApplicationsConnection!

  """Reads and enables pagination through a set of `LogEntry`."""
  logEntriesByOrganizationId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LogEntryCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `LogEntry`."""
    orderBy: [LogEntriesOrderBy!] = [PRIMARY_KEY_ASC]
  ): LogEntriesConnection!
  name: String!
  organizationId: Int!
}

"""
A condition to be used against `Organization` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input OrganizationCondition {
  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `organizationId` field."""
  organizationId: Int
}

"""An input for mutations affecting `Organization`"""
input OrganizationInput {
  name: String!
  organizationId: Int
}

"""
Represents an update to a `Organization`. Fields that are set will be updated.
"""
input OrganizationPatch {
  name: String
  organizationId: Int
}

"""A connection to a list of `Organization` values."""
type OrganizationsConnection {
  """
  A list of edges which contains the `Organization` and cursor to aid in pagination.
  """
  edges: [OrganizationsEdge]!

  """A list of `Organization` objects."""
  nodes: [Organization]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Organization` you could get from the connection."""
  totalCount: Int!
}

"""A `Organization` edge in the connection."""
type OrganizationsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Organization` at the end of the edge."""
  node: Organization
}

"""Methods to use when ordering `Organization`."""
enum OrganizationsOrderBy {
  NAME_ASC
  NAME_DESC
  NATURAL
  ORGANIZATION_ID_ASC
  ORGANIZATION_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor
}

"""A connection to a list of `Person` values."""
type PeopleConnection {
  """
  A list of edges which contains the `Person` and cursor to aid in pagination.
  """
  edges: [PeopleEdge]!

  """A list of `Person` objects."""
  nodes: [Person]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Person` you could get from the connection."""
  totalCount: Int!
}

"""A `Person` edge in the connection."""
type PeopleEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Person` at the end of the edge."""
  node: Person
}

"""Methods to use when ordering `Person`."""
enum PeopleOrderBy {
  NATURAL
  PERSON_ID_ASC
  PERSON_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  USERNAME_ASC
  USERNAME_DESC
}

type Person {
  """Reads and enables pagination through a set of `Application`."""
  applications(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Filter results to only those of the given types"""
    only: [ApplicationType!] @deprecated(reason: "EXPERIMENTAL")

    """The method to use when ordering `Application`."""
    orderBy: [ApplicationsOrderBy!]
  ): ApplicationsConnection!

  """Reads and enables pagination through a set of `AwsApplication`."""
  awsApplicationsByPersonId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AwsApplicationCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `AwsApplication`."""
    orderBy: [AwsApplicationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): AwsApplicationsConnection!

  """Reads and enables pagination through a set of `GcpApplication`."""
  gcpApplicationsByPersonId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GcpApplicationCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `GcpApplication`."""
    orderBy: [GcpApplicationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): GcpApplicationsConnection!

  """Reads and enables pagination through a set of `LogEntry`."""
  logEntriesByPersonId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LogEntryCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `LogEntry`."""
    orderBy: [LogEntriesOrderBy!] = [PRIMARY_KEY_ASC]
  ): LogEntriesConnection!
  personId: Int!

  """Reads and enables pagination through a set of `RelationalItem`."""
  relationalItemsByAuthorId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RelationalItemCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `RelationalItem`."""
    orderBy: [RelationalItemsOrderBy!] = [PRIMARY_KEY_ASC]
  ): RelationalItemsConnection!

  """Reads and enables pagination through a set of `SingleTableItem`."""
  singleTableItemsByAuthorId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SingleTableItemCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `SingleTableItem`."""
    orderBy: [SingleTableItemsOrderBy!] = [PRIMARY_KEY_ASC]
  ): SingleTableItemsConnection!
  username: String!
}

"""
A condition to be used against `Person` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input PersonCondition {
  """Checks for equality with the object’s `personId` field."""
  personId: Int

  """Checks for equality with the object’s `username` field."""
  username: String
}

"""An input for mutations affecting `Person`"""
input PersonInput {
  personId: Int
  username: String!
}

union PersonOrOrganization = Organization | Person

"""A connection to a list of `PersonOrOrganization` values."""
type PersonOrOrganizationConnection {
  """
  A list of edges which contains the `PersonOrOrganization` and cursor to aid in pagination.
  """
  edges: [PersonOrOrganizationEdge]!

  """A list of `PersonOrOrganization` objects."""
  nodes: [PersonOrOrganization]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""A `PersonOrOrganization` edge in the connection."""
type PersonOrOrganizationEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `PersonOrOrganization` at the end of the edge."""
  node: PersonOrOrganization
}

"""
Represents an update to a `Person`. Fields that are set will be updated.
"""
input PersonPatch {
  personId: Int
  username: String
}

"""A connection to a list of `Priority` values."""
type PrioritiesConnection {
  """
  A list of edges which contains the `Priority` and cursor to aid in pagination.
  """
  edges: [PrioritiesEdge]!

  """A list of `Priority` objects."""
  nodes: [Priority]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Priority` you could get from the connection."""
  totalCount: Int!
}

"""A `Priority` edge in the connection."""
type PrioritiesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Priority` at the end of the edge."""
  node: Priority
}

type Priority {
  id: Int!

  """Reads and enables pagination through a set of `SingleTableItem`."""
  singleTableItemsByPriorityId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SingleTableItemCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `SingleTableItem`."""
    orderBy: [SingleTableItemsOrderBy!] = [PRIMARY_KEY_ASC]
  ): SingleTableItemsConnection!
  title: String!
}

"""The root query type which gives access points into the data universe."""
type Query {
  allApplications(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Filter results to only those of the given types"""
    only: [ApplicationType!] @deprecated(reason: "EXPERIMENTAL")

    """The method to use when ordering `Application`."""
    orderBy: [ApplicationsOrderBy!]
  ): ApplicationsConnection

  """Reads and enables pagination through a set of `AwsApplication`."""
  allAwsApplications(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AwsApplicationCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `AwsApplication`."""
    orderBy: [AwsApplicationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): AwsApplicationsConnection

  """Reads and enables pagination through a set of `Collection`."""
  allCollections(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CollectionCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Collection`."""
    orderBy: [CollectionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CollectionsConnection

  """
  Reads and enables pagination through a set of `FirstPartyVulnerability`.
  """
  allFirstPartyVulnerabilities(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FirstPartyVulnerabilityCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FirstPartyVulnerability`."""
    orderBy: [FirstPartyVulnerabilitiesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FirstPartyVulnerabilitiesConnection

  """Reads and enables pagination through a set of `GcpApplication`."""
  allGcpApplications(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GcpApplicationCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `GcpApplication`."""
    orderBy: [GcpApplicationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): GcpApplicationsConnection

  """Reads and enables pagination through a set of `LogEntry`."""
  allLogEntries(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LogEntryCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `LogEntry`."""
    orderBy: [LogEntriesOrderBy!] = [PRIMARY_KEY_ASC]
  ): LogEntriesConnection

  """Reads and enables pagination through a set of `Organization`."""
  allOrganizations(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OrganizationCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Organization`."""
    orderBy: [OrganizationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): OrganizationsConnection

  """Reads and enables pagination through a set of `Person`."""
  allPeople(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PersonCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Person`."""
    orderBy: [PeopleOrderBy!] = [PRIMARY_KEY_ASC]
  ): PeopleConnection

  """Reads and enables pagination through a set of `Priority`."""
  allPriorities(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
  ): PrioritiesConnection

  """
  Reads and enables pagination through a set of `RelationalChecklistItem`.
  """
  allRelationalChecklistItems(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RelationalChecklistItemCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `RelationalChecklistItem`."""
    orderBy: [RelationalChecklistItemsOrderBy!] = [PRIMARY_KEY_ASC]
  ): RelationalChecklistItemsConnection

  """Reads and enables pagination through a set of `RelationalChecklist`."""
  allRelationalChecklists(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RelationalChecklistCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `RelationalChecklist`."""
    orderBy: [RelationalChecklistsOrderBy!] = [PRIMARY_KEY_ASC]
  ): RelationalChecklistsConnection

  """Reads and enables pagination through a set of `RelationalDivider`."""
  allRelationalDividers(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RelationalDividerCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `RelationalDivider`."""
    orderBy: [RelationalDividersOrderBy!] = [PRIMARY_KEY_ASC]
  ): RelationalDividersConnection

  """
  Reads and enables pagination through a set of `RelationalItemRelationCompositePk`.
  """
  allRelationalItemRelationCompositePks(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RelationalItemRelationCompositePkCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `RelationalItemRelationCompositePk`."""
    orderBy: [RelationalItemRelationCompositePksOrderBy!] = [PRIMARY_KEY_ASC]
  ): RelationalItemRelationCompositePksConnection

  """
  Reads and enables pagination through a set of `RelationalItemRelation`.
  """
  allRelationalItemRelations(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RelationalItemRelationCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `RelationalItemRelation`."""
    orderBy: [RelationalItemRelationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): RelationalItemRelationsConnection

  """Reads and enables pagination through a set of `RelationalItem`."""
  allRelationalItems(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RelationalItemCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `RelationalItem`."""
    orderBy: [RelationalItemsOrderBy!] = [PRIMARY_KEY_ASC]
  ): RelationalItemsConnection

  """Reads and enables pagination through a set of `RelationalItem`."""
  allRelationalItemsFn(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
  ): RelationalItemsConnection

  """Reads and enables pagination through a set of `RelationalPost`."""
  allRelationalPosts(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RelationalPostCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `RelationalPost`."""
    orderBy: [RelationalPostsOrderBy!] = [PRIMARY_KEY_ASC]
  ): RelationalPostsConnection

  """Reads and enables pagination through a set of `RelationalTopic`."""
  allRelationalTopics(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RelationalTopicCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `RelationalTopic`."""
    orderBy: [RelationalTopicsOrderBy!] = [PRIMARY_KEY_ASC]
  ): RelationalTopicsConnection

  """
  Reads and enables pagination through a set of `SingleTableItemRelationCompositePk`.
  """
  allSingleTableItemRelationCompositePks(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SingleTableItemRelationCompositePkCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `SingleTableItemRelationCompositePk`."""
    orderBy: [SingleTableItemRelationCompositePksOrderBy!] = [PRIMARY_KEY_ASC]
  ): SingleTableItemRelationCompositePksConnection

  """
  Reads and enables pagination through a set of `SingleTableItemRelation`.
  """
  allSingleTableItemRelations(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SingleTableItemRelationCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `SingleTableItemRelation`."""
    orderBy: [SingleTableItemRelationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): SingleTableItemRelationsConnection

  """Reads and enables pagination through a set of `SingleTableItem`."""
  allSingleTableItems(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SingleTableItemCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `SingleTableItem`."""
    orderBy: [SingleTableItemsOrderBy!] = [PRIMARY_KEY_ASC]
  ): SingleTableItemsConnection

  """Reads and enables pagination through a set of `SingleTableItem`."""
  allSingleTables(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
  ): SingleTableItemsConnection

  """
  Reads and enables pagination through a set of `ThirdPartyVulnerability`.
  """
  allThirdPartyVulnerabilities(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ThirdPartyVulnerabilityCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ThirdPartyVulnerability`."""
    orderBy: [ThirdPartyVulnerabilitiesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ThirdPartyVulnerabilitiesConnection
  allVulnerabilities(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: VulnerabilityCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Filter results to only those of the given types"""
    only: [VulnerabilityType!] @deprecated(reason: "EXPERIMENTAL")

    """The method to use when ordering `Vulnerability`."""
    orderBy: [VulnerabilitiesOrderBy!]
  ): VulnerabilitiesConnection
  allZeroImplementations(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ZeroImplementationCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ZeroImplementation`."""
    orderBy: [ZeroImplementationsOrderBy!]
  ): ZeroImplementationsConnection

  """Get a single `AwsApplication`."""
  awsApplicationById(id: Int!): AwsApplication

  """Get a single `FirstPartyVulnerability`."""
  firstPartyVulnerabilityById(id: Int!): FirstPartyVulnerability

  """Get a single `GcpApplication`."""
  gcpApplicationById(id: Int!): GcpApplication
  getSingleTableTopicById(id: Int): SingleTableTopic

  """Get a single `LogEntry`."""
  logEntryById(id: Int!): LogEntry

  """Get a single `Organization`."""
  organizationByName(name: String!): Organization

  """Get a single `Organization`."""
  organizationByOrganizationId(organizationId: Int!): Organization

  """Get a single `Person`."""
  personByPersonId(personId: Int!): Person

  """Get a single `Person`."""
  personByUsername(username: String!): Person

  """Get a single `Priority`."""
  priorityById(id: Int!): Priority

  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  """
  query: Query!

  """Get a single `RelationalChecklist`."""
  relationalChecklistByChecklistItemId(checklistItemId: Int!): RelationalChecklist

  """Get a single `RelationalChecklistItem`."""
  relationalChecklistItemByChecklistItemItemId(checklistItemItemId: Int!): RelationalChecklistItem

  """Get a single `RelationalDivider`."""
  relationalDividerByDividerItemId(dividerItemId: Int!): RelationalDivider
  relationalItemByIdFn(id: Int): RelationalItem

  """Get a single `RelationalItemRelation`."""
  relationalItemRelationById(id: Int!): RelationalItemRelation

  """Get a single `RelationalItemRelation`."""
  relationalItemRelationByParentIdAndChildId(childId: Int!, parentId: Int!): RelationalItemRelation

  """Get a single `RelationalItemRelationCompositePk`."""
  relationalItemRelationCompositePkByParentIdAndChildId(childId: Int!, parentId: Int!): RelationalItemRelationCompositePk

  """Get a single `RelationalPost`."""
  relationalPostByPostItemId(postItemId: Int!): RelationalPost
  relationalTopicByIdFn(id: Int): RelationalTopic

  """Get a single `RelationalTopic`."""
  relationalTopicByTopicItemId(topicItemId: Int!): RelationalTopic

  """Get a single `SingleTableItemRelation`."""
  singleTableItemRelationById(id: Int!): SingleTableItemRelation

  """Get a single `SingleTableItemRelation`."""
  singleTableItemRelationByParentIdAndChildId(childId: Int!, parentId: Int!): SingleTableItemRelation

  """Get a single `SingleTableItemRelationCompositePk`."""
  singleTableItemRelationCompositePkByParentIdAndChildId(childId: Int!, parentId: Int!): SingleTableItemRelationCompositePk

  """Get a single `ThirdPartyVulnerability`."""
  thirdPartyVulnerabilityById(id: Int!): ThirdPartyVulnerability
}

type RelationalChecklist implements RelationalItem {
  archivedAt: Datetime
  authorId: Int!
  createdAt: Datetime!
  id: Int!
  isExplicitlyArchived: Boolean!
  parentId: Int

  """Reads a single `Person` that is related to this `RelationalChecklist`."""
  personByAuthorId: Person
  position: BigInt!

  """
  Reads a single `RelationalItem` that is related to this `RelationalChecklist`.
  """
  relationalItemByParentId: RelationalItem

  """
  Reads and enables pagination through a set of `RelationalItemRelationCompositePk`.
  """
  relationalItemRelationCompositePksByChildId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RelationalItemRelationCompositePkCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `RelationalItemRelationCompositePk`."""
    orderBy: [RelationalItemRelationCompositePksOrderBy!] = [PRIMARY_KEY_ASC]
  ): RelationalItemRelationCompositePksConnection!

  """
  Reads and enables pagination through a set of `RelationalItemRelationCompositePk`.
  """
  relationalItemRelationCompositePksByParentId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RelationalItemRelationCompositePkCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `RelationalItemRelationCompositePk`."""
    orderBy: [RelationalItemRelationCompositePksOrderBy!] = [PRIMARY_KEY_ASC]
  ): RelationalItemRelationCompositePksConnection!

  """
  Reads and enables pagination through a set of `RelationalItemRelation`.
  """
  relationalItemRelationsByChildId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RelationalItemRelationCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `RelationalItemRelation`."""
    orderBy: [RelationalItemRelationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): RelationalItemRelationsConnection!

  """
  Reads and enables pagination through a set of `RelationalItemRelation`.
  """
  relationalItemRelationsByParentId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RelationalItemRelationCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `RelationalItemRelation`."""
    orderBy: [RelationalItemRelationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): RelationalItemRelationsConnection!

  """Reads and enables pagination through a set of `RelationalItem`."""
  relationalItemsByParentId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RelationalItemCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `RelationalItem`."""
    orderBy: [RelationalItemsOrderBy!] = [PRIMARY_KEY_ASC]
  ): RelationalItemsConnection!

  """
  Reads a single `RelationalTopic` that is related to this `RelationalChecklist`.
  """
  relationalTopicByRootTopicId: RelationalTopic
  rootTopicId: Int
  title: String!
  type: ItemType!
  updatedAt: Datetime!
}

"""
A condition to be used against `RelationalChecklist` object types. All fields
are tested for equality and combined with a logical ‘and.’
"""
input RelationalChecklistCondition {
  """Checks for equality with the object’s `archivedAt` field."""
  archivedAt: Datetime

  """Checks for equality with the object’s `authorId` field."""
  authorId: Int

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `isExplicitlyArchived` field."""
  isExplicitlyArchived: Boolean

  """Checks for equality with the object’s `parentId` field."""
  parentId: Int

  """Checks for equality with the object’s `position` field."""
  position: BigInt

  """Checks for equality with the object’s `rootTopicId` field."""
  rootTopicId: Int

  """Checks for equality with the object’s `title` field."""
  title: String

  """Checks for equality with the object’s `type` field."""
  type: ItemType

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime
}

type RelationalChecklistItem implements RelationalItem {
  archivedAt: Datetime
  authorId: Int!
  createdAt: Datetime!
  description: String!
  id: Int!
  isExplicitlyArchived: Boolean!
  note: String
  parentId: Int

  """
  Reads a single `Person` that is related to this `RelationalChecklistItem`.
  """
  personByAuthorId: Person
  position: BigInt!

  """
  Reads a single `RelationalItem` that is related to this `RelationalChecklistItem`.
  """
  relationalItemByParentId: RelationalItem

  """
  Reads and enables pagination through a set of `RelationalItemRelationCompositePk`.
  """
  relationalItemRelationCompositePksByChildId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RelationalItemRelationCompositePkCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `RelationalItemRelationCompositePk`."""
    orderBy: [RelationalItemRelationCompositePksOrderBy!] = [PRIMARY_KEY_ASC]
  ): RelationalItemRelationCompositePksConnection!

  """
  Reads and enables pagination through a set of `RelationalItemRelationCompositePk`.
  """
  relationalItemRelationCompositePksByParentId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RelationalItemRelationCompositePkCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `RelationalItemRelationCompositePk`."""
    orderBy: [RelationalItemRelationCompositePksOrderBy!] = [PRIMARY_KEY_ASC]
  ): RelationalItemRelationCompositePksConnection!

  """
  Reads and enables pagination through a set of `RelationalItemRelation`.
  """
  relationalItemRelationsByChildId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RelationalItemRelationCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `RelationalItemRelation`."""
    orderBy: [RelationalItemRelationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): RelationalItemRelationsConnection!

  """
  Reads and enables pagination through a set of `RelationalItemRelation`.
  """
  relationalItemRelationsByParentId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RelationalItemRelationCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `RelationalItemRelation`."""
    orderBy: [RelationalItemRelationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): RelationalItemRelationsConnection!

  """Reads and enables pagination through a set of `RelationalItem`."""
  relationalItemsByParentId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RelationalItemCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `RelationalItem`."""
    orderBy: [RelationalItemsOrderBy!] = [PRIMARY_KEY_ASC]
  ): RelationalItemsConnection!

  """
  Reads a single `RelationalTopic` that is related to this `RelationalChecklistItem`.
  """
  relationalTopicByRootTopicId: RelationalTopic
  rootTopicId: Int
  type: ItemType!
  updatedAt: Datetime!
}

"""
A condition to be used against `RelationalChecklistItem` object types. All
fields are tested for equality and combined with a logical ‘and.’
"""
input RelationalChecklistItemCondition {
  """Checks for equality with the object’s `archivedAt` field."""
  archivedAt: Datetime

  """Checks for equality with the object’s `authorId` field."""
  authorId: Int

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `description` field."""
  description: String

  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `isExplicitlyArchived` field."""
  isExplicitlyArchived: Boolean

  """Checks for equality with the object’s `note` field."""
  note: String

  """Checks for equality with the object’s `parentId` field."""
  parentId: Int

  """Checks for equality with the object’s `position` field."""
  position: BigInt

  """Checks for equality with the object’s `rootTopicId` field."""
  rootTopicId: Int

  """Checks for equality with the object’s `type` field."""
  type: ItemType

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime
}

"""A connection to a list of `RelationalChecklistItem` values."""
type RelationalChecklistItemsConnection {
  """
  A list of edges which contains the `RelationalChecklistItem` and cursor to aid in pagination.
  """
  edges: [RelationalChecklistItemsEdge]!

  """A list of `RelationalChecklistItem` objects."""
  nodes: [RelationalChecklistItem]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `RelationalChecklistItem` you could get from the connection.
  """
  totalCount: Int!
}

"""A `RelationalChecklistItem` edge in the connection."""
type RelationalChecklistItemsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `RelationalChecklistItem` at the end of the edge."""
  node: RelationalChecklistItem
}

"""Methods to use when ordering `RelationalChecklistItem`."""
enum RelationalChecklistItemsOrderBy {
  ARCHIVED_AT_ASC
  ARCHIVED_AT_DESC
  AUTHOR_ID_ASC
  AUTHOR_ID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  ID_ASC
  ID_DESC
  IS_EXPLICITLY_ARCHIVED_ASC
  IS_EXPLICITLY_ARCHIVED_DESC
  NATURAL
  NOTE_ASC
  NOTE_DESC
  PARENT_ID_ASC
  PARENT_ID_DESC
  POSITION_ASC
  POSITION_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  ROOT_TOPIC_ID_ASC
  ROOT_TOPIC_ID_DESC
  TYPE_ASC
  TYPE_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
}

"""A connection to a list of `RelationalChecklist` values."""
type RelationalChecklistsConnection {
  """
  A list of edges which contains the `RelationalChecklist` and cursor to aid in pagination.
  """
  edges: [RelationalChecklistsEdge]!

  """A list of `RelationalChecklist` objects."""
  nodes: [RelationalChecklist]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `RelationalChecklist` you could get from the connection.
  """
  totalCount: Int!
}

"""A `RelationalChecklist` edge in the connection."""
type RelationalChecklistsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `RelationalChecklist` at the end of the edge."""
  node: RelationalChecklist
}

"""Methods to use when ordering `RelationalChecklist`."""
enum RelationalChecklistsOrderBy {
  ARCHIVED_AT_ASC
  ARCHIVED_AT_DESC
  AUTHOR_ID_ASC
  AUTHOR_ID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  ID_ASC
  ID_DESC
  IS_EXPLICITLY_ARCHIVED_ASC
  IS_EXPLICITLY_ARCHIVED_DESC
  NATURAL
  PARENT_ID_ASC
  PARENT_ID_DESC
  POSITION_ASC
  POSITION_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  ROOT_TOPIC_ID_ASC
  ROOT_TOPIC_ID_DESC
  TITLE_ASC
  TITLE_DESC
  TYPE_ASC
  TYPE_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
}

type RelationalDivider implements RelationalItem {
  archivedAt: Datetime
  authorId: Int!
  color: String
  createdAt: Datetime!
  id: Int!
  isExplicitlyArchived: Boolean!
  parentId: Int

  """Reads a single `Person` that is related to this `RelationalDivider`."""
  personByAuthorId: Person
  position: BigInt!

  """
  Reads a single `RelationalItem` that is related to this `RelationalDivider`.
  """
  relationalItemByParentId: RelationalItem

  """
  Reads and enables pagination through a set of `RelationalItemRelationCompositePk`.
  """
  relationalItemRelationCompositePksByChildId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RelationalItemRelationCompositePkCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `RelationalItemRelationCompositePk`."""
    orderBy: [RelationalItemRelationCompositePksOrderBy!] = [PRIMARY_KEY_ASC]
  ): RelationalItemRelationCompositePksConnection!

  """
  Reads and enables pagination through a set of `RelationalItemRelationCompositePk`.
  """
  relationalItemRelationCompositePksByParentId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RelationalItemRelationCompositePkCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `RelationalItemRelationCompositePk`."""
    orderBy: [RelationalItemRelationCompositePksOrderBy!] = [PRIMARY_KEY_ASC]
  ): RelationalItemRelationCompositePksConnection!

  """
  Reads and enables pagination through a set of `RelationalItemRelation`.
  """
  relationalItemRelationsByChildId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RelationalItemRelationCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `RelationalItemRelation`."""
    orderBy: [RelationalItemRelationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): RelationalItemRelationsConnection!

  """
  Reads and enables pagination through a set of `RelationalItemRelation`.
  """
  relationalItemRelationsByParentId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RelationalItemRelationCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `RelationalItemRelation`."""
    orderBy: [RelationalItemRelationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): RelationalItemRelationsConnection!

  """Reads and enables pagination through a set of `RelationalItem`."""
  relationalItemsByParentId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RelationalItemCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `RelationalItem`."""
    orderBy: [RelationalItemsOrderBy!] = [PRIMARY_KEY_ASC]
  ): RelationalItemsConnection!

  """
  Reads a single `RelationalTopic` that is related to this `RelationalDivider`.
  """
  relationalTopicByRootTopicId: RelationalTopic
  rootTopicId: Int
  title: String
  type: ItemType!
  updatedAt: Datetime!
}

"""
A condition to be used against `RelationalDivider` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input RelationalDividerCondition {
  """Checks for equality with the object’s `archivedAt` field."""
  archivedAt: Datetime

  """Checks for equality with the object’s `authorId` field."""
  authorId: Int

  """Checks for equality with the object’s `color` field."""
  color: String

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `isExplicitlyArchived` field."""
  isExplicitlyArchived: Boolean

  """Checks for equality with the object’s `parentId` field."""
  parentId: Int

  """Checks for equality with the object’s `position` field."""
  position: BigInt

  """Checks for equality with the object’s `rootTopicId` field."""
  rootTopicId: Int

  """Checks for equality with the object’s `title` field."""
  title: String

  """Checks for equality with the object’s `type` field."""
  type: ItemType

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime
}

"""A connection to a list of `RelationalDivider` values."""
type RelationalDividersConnection {
  """
  A list of edges which contains the `RelationalDivider` and cursor to aid in pagination.
  """
  edges: [RelationalDividersEdge]!

  """A list of `RelationalDivider` objects."""
  nodes: [RelationalDivider]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `RelationalDivider` you could get from the connection.
  """
  totalCount: Int!
}

"""A `RelationalDivider` edge in the connection."""
type RelationalDividersEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `RelationalDivider` at the end of the edge."""
  node: RelationalDivider
}

"""Methods to use when ordering `RelationalDivider`."""
enum RelationalDividersOrderBy {
  ARCHIVED_AT_ASC
  ARCHIVED_AT_DESC
  AUTHOR_ID_ASC
  AUTHOR_ID_DESC
  COLOR_ASC
  COLOR_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  ID_ASC
  ID_DESC
  IS_EXPLICITLY_ARCHIVED_ASC
  IS_EXPLICITLY_ARCHIVED_DESC
  NATURAL
  PARENT_ID_ASC
  PARENT_ID_DESC
  POSITION_ASC
  POSITION_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  ROOT_TOPIC_ID_ASC
  ROOT_TOPIC_ID_DESC
  TITLE_ASC
  TITLE_DESC
  TYPE_ASC
  TYPE_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
}

interface RelationalItem {
  archivedAt: Datetime
  authorId: Int!
  createdAt: Datetime!
  id: Int!
  isExplicitlyArchived: Boolean!
  parentId: Int

  """Reads a single `Person` that is related to this `RelationalItem`."""
  personByAuthorId: Person
  position: BigInt!

  """
  Reads a single `RelationalItem` that is related to this `RelationalItem`.
  """
  relationalItemByParentId: RelationalItem

  """
  Reads and enables pagination through a set of `RelationalItemRelationCompositePk`.
  """
  relationalItemRelationCompositePksByChildId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
  ): RelationalItemRelationCompositePksConnection!

  """
  Reads and enables pagination through a set of `RelationalItemRelationCompositePk`.
  """
  relationalItemRelationCompositePksByParentId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
  ): RelationalItemRelationCompositePksConnection!

  """
  Reads and enables pagination through a set of `RelationalItemRelation`.
  """
  relationalItemRelationsByChildId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
  ): RelationalItemRelationsConnection!

  """
  Reads and enables pagination through a set of `RelationalItemRelation`.
  """
  relationalItemRelationsByParentId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
  ): RelationalItemRelationsConnection!

  """Reads and enables pagination through a set of `RelationalItem`."""
  relationalItemsByParentId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
  ): RelationalItemsConnection!

  """
  Reads a single `RelationalTopic` that is related to this `RelationalItem`.
  """
  relationalTopicByRootTopicId: RelationalTopic
  rootTopicId: Int
  type: ItemType!
  updatedAt: Datetime!
}

"""
A condition to be used against `RelationalItem` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input RelationalItemCondition {
  """Checks for equality with the object’s `archivedAt` field."""
  archivedAt: Datetime

  """Checks for equality with the object’s `authorId` field."""
  authorId: Int

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `isExplicitlyArchived` field."""
  isExplicitlyArchived: Boolean

  """Checks for equality with the object’s `parentId` field."""
  parentId: Int

  """Checks for equality with the object’s `position` field."""
  position: BigInt

  """Checks for equality with the object’s `rootTopicId` field."""
  rootTopicId: Int

  """Checks for equality with the object’s `type` field."""
  type: ItemType

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime
}

type RelationalItemRelation {
  childId: Int!
  id: Int!
  parentId: Int!

  """
  Reads a single `RelationalItem` that is related to this `RelationalItemRelation`.
  """
  relationalItemByChildId: RelationalItem

  """
  Reads a single `RelationalItem` that is related to this `RelationalItemRelation`.
  """
  relationalItemByParentId: RelationalItem
}

type RelationalItemRelationCompositePk {
  childId: Int!
  parentId: Int!

  """
  Reads a single `RelationalItem` that is related to this `RelationalItemRelationCompositePk`.
  """
  relationalItemByChildId: RelationalItem

  """
  Reads a single `RelationalItem` that is related to this `RelationalItemRelationCompositePk`.
  """
  relationalItemByParentId: RelationalItem
}

"""
A condition to be used against `RelationalItemRelationCompositePk` object types.
All fields are tested for equality and combined with a logical ‘and.’
"""
input RelationalItemRelationCompositePkCondition {
  """Checks for equality with the object’s `childId` field."""
  childId: Int

  """Checks for equality with the object’s `parentId` field."""
  parentId: Int
}

"""An input for mutations affecting `RelationalItemRelationCompositePk`"""
input RelationalItemRelationCompositePkInput {
  childId: Int!
  parentId: Int!
}

"""
Represents an update to a `RelationalItemRelationCompositePk`. Fields that are set will be updated.
"""
input RelationalItemRelationCompositePkPatch {
  childId: Int
  parentId: Int
}

"""A connection to a list of `RelationalItemRelationCompositePk` values."""
type RelationalItemRelationCompositePksConnection {
  """
  A list of edges which contains the `RelationalItemRelationCompositePk` and cursor to aid in pagination.
  """
  edges: [RelationalItemRelationCompositePksEdge]!

  """A list of `RelationalItemRelationCompositePk` objects."""
  nodes: [RelationalItemRelationCompositePk]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `RelationalItemRelationCompositePk` you could get from the connection.
  """
  totalCount: Int!
}

"""A `RelationalItemRelationCompositePk` edge in the connection."""
type RelationalItemRelationCompositePksEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `RelationalItemRelationCompositePk` at the end of the edge."""
  node: RelationalItemRelationCompositePk
}

"""Methods to use when ordering `RelationalItemRelationCompositePk`."""
enum RelationalItemRelationCompositePksOrderBy {
  CHILD_ID_ASC
  CHILD_ID_DESC
  NATURAL
  PARENT_ID_ASC
  PARENT_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `RelationalItemRelation` object types. All fields
are tested for equality and combined with a logical ‘and.’
"""
input RelationalItemRelationCondition {
  """Checks for equality with the object’s `childId` field."""
  childId: Int

  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `parentId` field."""
  parentId: Int
}

"""An input for mutations affecting `RelationalItemRelation`"""
input RelationalItemRelationInput {
  childId: Int!
  id: Int
  parentId: Int!
}

"""
Represents an update to a `RelationalItemRelation`. Fields that are set will be updated.
"""
input RelationalItemRelationPatch {
  childId: Int
  id: Int
  parentId: Int
}

"""A connection to a list of `RelationalItemRelation` values."""
type RelationalItemRelationsConnection {
  """
  A list of edges which contains the `RelationalItemRelation` and cursor to aid in pagination.
  """
  edges: [RelationalItemRelationsEdge]!

  """A list of `RelationalItemRelation` objects."""
  nodes: [RelationalItemRelation]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `RelationalItemRelation` you could get from the connection.
  """
  totalCount: Int!
}

"""A `RelationalItemRelation` edge in the connection."""
type RelationalItemRelationsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `RelationalItemRelation` at the end of the edge."""
  node: RelationalItemRelation
}

"""Methods to use when ordering `RelationalItemRelation`."""
enum RelationalItemRelationsOrderBy {
  CHILD_ID_ASC
  CHILD_ID_DESC
  ID_ASC
  ID_DESC
  NATURAL
  PARENT_ID_ASC
  PARENT_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""A connection to a list of `RelationalItem` values."""
type RelationalItemsConnection {
  """
  A list of edges which contains the `RelationalItem` and cursor to aid in pagination.
  """
  edges: [RelationalItemsEdge]!

  """A list of `RelationalItem` objects."""
  nodes: [RelationalItem]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `RelationalItem` you could get from the connection."""
  totalCount: Int!
}

"""A `RelationalItem` edge in the connection."""
type RelationalItemsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `RelationalItem` at the end of the edge."""
  node: RelationalItem
}

"""Methods to use when ordering `RelationalItem`."""
enum RelationalItemsOrderBy {
  ARCHIVED_AT_ASC
  ARCHIVED_AT_DESC
  AUTHOR_ID_ASC
  AUTHOR_ID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  ID_ASC
  ID_DESC
  IS_EXPLICITLY_ARCHIVED_ASC
  IS_EXPLICITLY_ARCHIVED_DESC
  NATURAL
  PARENT_ID_ASC
  PARENT_ID_DESC
  POSITION_ASC
  POSITION_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  ROOT_TOPIC_ID_ASC
  ROOT_TOPIC_ID_DESC
  TYPE_ASC
  TYPE_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
}

type RelationalPost implements RelationalItem {
  archivedAt: Datetime
  authorId: Int!
  createdAt: Datetime!
  description: String
  id: Int!
  isExplicitlyArchived: Boolean!
  note: String
  parentId: Int

  """Reads a single `Person` that is related to this `RelationalPost`."""
  personByAuthorId: Person
  position: BigInt!

  """
  Reads a single `RelationalItem` that is related to this `RelationalPost`.
  """
  relationalItemByParentId: RelationalItem

  """
  Reads and enables pagination through a set of `RelationalItemRelationCompositePk`.
  """
  relationalItemRelationCompositePksByChildId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RelationalItemRelationCompositePkCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `RelationalItemRelationCompositePk`."""
    orderBy: [RelationalItemRelationCompositePksOrderBy!] = [PRIMARY_KEY_ASC]
  ): RelationalItemRelationCompositePksConnection!

  """
  Reads and enables pagination through a set of `RelationalItemRelationCompositePk`.
  """
  relationalItemRelationCompositePksByParentId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RelationalItemRelationCompositePkCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `RelationalItemRelationCompositePk`."""
    orderBy: [RelationalItemRelationCompositePksOrderBy!] = [PRIMARY_KEY_ASC]
  ): RelationalItemRelationCompositePksConnection!

  """
  Reads and enables pagination through a set of `RelationalItemRelation`.
  """
  relationalItemRelationsByChildId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RelationalItemRelationCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `RelationalItemRelation`."""
    orderBy: [RelationalItemRelationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): RelationalItemRelationsConnection!

  """
  Reads and enables pagination through a set of `RelationalItemRelation`.
  """
  relationalItemRelationsByParentId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RelationalItemRelationCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `RelationalItemRelation`."""
    orderBy: [RelationalItemRelationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): RelationalItemRelationsConnection!

  """Reads and enables pagination through a set of `RelationalItem`."""
  relationalItemsByParentId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RelationalItemCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `RelationalItem`."""
    orderBy: [RelationalItemsOrderBy!] = [PRIMARY_KEY_ASC]
  ): RelationalItemsConnection!

  """
  Reads a single `RelationalTopic` that is related to this `RelationalPost`.
  """
  relationalTopicByRootTopicId: RelationalTopic
  rootTopicId: Int
  title: String!
  type: ItemType!
  updatedAt: Datetime!
}

"""
A condition to be used against `RelationalPost` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input RelationalPostCondition {
  """Checks for equality with the object’s `archivedAt` field."""
  archivedAt: Datetime

  """Checks for equality with the object’s `authorId` field."""
  authorId: Int

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `description` field."""
  description: String

  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `isExplicitlyArchived` field."""
  isExplicitlyArchived: Boolean

  """Checks for equality with the object’s `note` field."""
  note: String

  """Checks for equality with the object’s `parentId` field."""
  parentId: Int

  """Checks for equality with the object’s `position` field."""
  position: BigInt

  """Checks for equality with the object’s `rootTopicId` field."""
  rootTopicId: Int

  """Checks for equality with the object’s `title` field."""
  title: String

  """Checks for equality with the object’s `type` field."""
  type: ItemType

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime
}

"""A connection to a list of `RelationalPost` values."""
type RelationalPostsConnection {
  """
  A list of edges which contains the `RelationalPost` and cursor to aid in pagination.
  """
  edges: [RelationalPostsEdge]!

  """A list of `RelationalPost` objects."""
  nodes: [RelationalPost]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `RelationalPost` you could get from the connection."""
  totalCount: Int!
}

"""A `RelationalPost` edge in the connection."""
type RelationalPostsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `RelationalPost` at the end of the edge."""
  node: RelationalPost
}

"""Methods to use when ordering `RelationalPost`."""
enum RelationalPostsOrderBy {
  ARCHIVED_AT_ASC
  ARCHIVED_AT_DESC
  AUTHOR_ID_ASC
  AUTHOR_ID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  ID_ASC
  ID_DESC
  IS_EXPLICITLY_ARCHIVED_ASC
  IS_EXPLICITLY_ARCHIVED_DESC
  NATURAL
  NOTE_ASC
  NOTE_DESC
  PARENT_ID_ASC
  PARENT_ID_DESC
  POSITION_ASC
  POSITION_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  ROOT_TOPIC_ID_ASC
  ROOT_TOPIC_ID_DESC
  TITLE_ASC
  TITLE_DESC
  TYPE_ASC
  TYPE_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
}

type RelationalTopic implements RelationalItem {
  archivedAt: Datetime
  authorId: Int!
  createdAt: Datetime!
  id: Int!
  isExplicitlyArchived: Boolean!
  parentFn: RelationalItem
  parentId: Int

  """Reads a single `Person` that is related to this `RelationalTopic`."""
  personByAuthorId: Person
  position: BigInt!

  """
  Reads a single `RelationalItem` that is related to this `RelationalTopic`.
  """
  relationalItemByParentId: RelationalItem

  """
  Reads and enables pagination through a set of `RelationalItemRelationCompositePk`.
  """
  relationalItemRelationCompositePksByChildId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RelationalItemRelationCompositePkCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `RelationalItemRelationCompositePk`."""
    orderBy: [RelationalItemRelationCompositePksOrderBy!] = [PRIMARY_KEY_ASC]
  ): RelationalItemRelationCompositePksConnection!

  """
  Reads and enables pagination through a set of `RelationalItemRelationCompositePk`.
  """
  relationalItemRelationCompositePksByParentId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RelationalItemRelationCompositePkCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `RelationalItemRelationCompositePk`."""
    orderBy: [RelationalItemRelationCompositePksOrderBy!] = [PRIMARY_KEY_ASC]
  ): RelationalItemRelationCompositePksConnection!

  """
  Reads and enables pagination through a set of `RelationalItemRelation`.
  """
  relationalItemRelationsByChildId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RelationalItemRelationCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `RelationalItemRelation`."""
    orderBy: [RelationalItemRelationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): RelationalItemRelationsConnection!

  """
  Reads and enables pagination through a set of `RelationalItemRelation`.
  """
  relationalItemRelationsByParentId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RelationalItemRelationCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `RelationalItemRelation`."""
    orderBy: [RelationalItemRelationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): RelationalItemRelationsConnection!

  """Reads and enables pagination through a set of `RelationalItem`."""
  relationalItemsByParentId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RelationalItemCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `RelationalItem`."""
    orderBy: [RelationalItemsOrderBy!] = [PRIMARY_KEY_ASC]
  ): RelationalItemsConnection!

  """Reads and enables pagination through a set of `RelationalItem`."""
  relationalItemsByRootTopicId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RelationalItemCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `RelationalItem`."""
    orderBy: [RelationalItemsOrderBy!] = [PRIMARY_KEY_ASC]
  ): RelationalItemsConnection!

  """
  Reads a single `RelationalTopic` that is related to this `RelationalTopic`.
  """
  relationalTopicByRootTopicId: RelationalTopic
  rootTopicId: Int
  title: String!
  type: ItemType!
  updatedAt: Datetime!
}

"""
A condition to be used against `RelationalTopic` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input RelationalTopicCondition {
  """Checks for equality with the object’s `archivedAt` field."""
  archivedAt: Datetime

  """Checks for equality with the object’s `authorId` field."""
  authorId: Int

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `isExplicitlyArchived` field."""
  isExplicitlyArchived: Boolean

  """Checks for equality with the object’s `parentId` field."""
  parentId: Int

  """Checks for equality with the object’s `position` field."""
  position: BigInt

  """Checks for equality with the object’s `rootTopicId` field."""
  rootTopicId: Int

  """Checks for equality with the object’s `title` field."""
  title: String

  """Checks for equality with the object’s `type` field."""
  type: ItemType

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime
}

"""A connection to a list of `RelationalTopic` values."""
type RelationalTopicsConnection {
  """
  A list of edges which contains the `RelationalTopic` and cursor to aid in pagination.
  """
  edges: [RelationalTopicsEdge]!

  """A list of `RelationalTopic` objects."""
  nodes: [RelationalTopic]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `RelationalTopic` you could get from the connection.
  """
  totalCount: Int!
}

"""A `RelationalTopic` edge in the connection."""
type RelationalTopicsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `RelationalTopic` at the end of the edge."""
  node: RelationalTopic
}

"""Methods to use when ordering `RelationalTopic`."""
enum RelationalTopicsOrderBy {
  ARCHIVED_AT_ASC
  ARCHIVED_AT_DESC
  AUTHOR_ID_ASC
  AUTHOR_ID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  ID_ASC
  ID_DESC
  IS_EXPLICITLY_ARCHIVED_ASC
  IS_EXPLICITLY_ARCHIVED_DESC
  NATURAL
  PARENT_ID_ASC
  PARENT_ID_DESC
  POSITION_ASC
  POSITION_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  ROOT_TOPIC_ID_ASC
  ROOT_TOPIC_ID_DESC
  TITLE_ASC
  TITLE_DESC
  TYPE_ASC
  TYPE_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
}

type SeriesCollection implements Collection {
  col001: String
  col002: String
  col003: String
  col004: String
  col005: String
  col006: String
  col007: String
  col008: String
  col009: String
  col010: String
  col011: String
  col012: String
  col013: String
  col014: String
  col015: String
  col016: String
  col017: String
  col018: String
  col019: String
  col020: String
  col021: String
  col022: String
  col023: String
  col024: String
  col025: String
  col026: String
  col027: String
  col028: String
  col029: String
  col030: String
  col031: String
  col032: String
  col033: String
  col034: String
  col035: String
  col036: String
  col037: String
  col038: String
  col039: String
  col040: String
  col041: String
  col042: String
  col043: String
  col044: String
  col045: String
  col046: String
  col047: String
  col048: String
  col049: String
  col050: String
  col051: String
  col052: String
  col053: String
  col054: String
  col055: String
  col056: String
  col057: String
  col058: String
  col059: String
  col060: String
  col061: String
  col062: String
  col063: String
  col064: String
  col065: String
  col066: String
  col067: String
  col068: String
  col069: String
  col070: String
  col071: String
  col072: String
  col073: String
  col074: String
  col075: String
  col076: String
  col077: String
  col078: String
  col079: String
  col080: String
  col081: String
  col082: String
  col083: String
  col084: String
  col085: String
  col086: String
  col087: String
  col088: String
  col089: String
  col090: String
  col091: String
  col092: String
  col093: String
  col094: String
  col095: String
  col096: String
  col097: String
  col098: String
  col099: String
  col100: String
  createdAt: Datetime
  episodes: Int
  id: String!
  name: String!
  recommendations: JSON
  type: String!
}

type SingleTableChecklist implements SingleTableItem {
  archivedAt: Datetime
  authorId: Int!
  createdAt: Datetime!
  id: Int!
  isExplicitlyArchived: Boolean!
  meaningOfLife: Int
  parentId: Int

  """Reads a single `Person` that is related to this `SingleTableItem`."""
  personByAuthorId: Person
  position: BigInt!

  """
  Reads a single `SingleTableTopic` that is related to this `SingleTableChecklist`.
  """
  rootChecklistTopic: SingleTableTopic

  """
  Reads a single `SingleTableTopic` that is related to this `SingleTableChecklist`.
  """
  rootTopic: SingleTableTopic
  rootTopicId: Int

  """
  Reads a single `SingleTableItem` that is related to this `SingleTableItem`.
  """
  singleTableItemByParentId: SingleTableItem

  """
  Reads and enables pagination through a set of `SingleTableItemRelationCompositePk`.
  """
  singleTableItemRelationCompositePksByChildId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SingleTableItemRelationCompositePkCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `SingleTableItemRelationCompositePk`."""
    orderBy: [SingleTableItemRelationCompositePksOrderBy!] = [PRIMARY_KEY_ASC]
  ): SingleTableItemRelationCompositePksConnection!

  """
  Reads and enables pagination through a set of `SingleTableItemRelationCompositePk`.
  """
  singleTableItemRelationCompositePksByParentId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SingleTableItemRelationCompositePkCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `SingleTableItemRelationCompositePk`."""
    orderBy: [SingleTableItemRelationCompositePksOrderBy!] = [PRIMARY_KEY_ASC]
  ): SingleTableItemRelationCompositePksConnection!

  """
  Reads and enables pagination through a set of `SingleTableItemRelation`.
  """
  singleTableItemRelationsByChildId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SingleTableItemRelationCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `SingleTableItemRelation`."""
    orderBy: [SingleTableItemRelationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): SingleTableItemRelationsConnection!

  """
  Reads and enables pagination through a set of `SingleTableItemRelation`.
  """
  singleTableItemRelationsByParentId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SingleTableItemRelationCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `SingleTableItemRelation`."""
    orderBy: [SingleTableItemRelationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): SingleTableItemRelationsConnection!

  """Reads and enables pagination through a set of `SingleTableItem`."""
  singleTableItemsByParentId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SingleTableItemCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `SingleTableItem`."""
    orderBy: [SingleTableItemsOrderBy!] = [PRIMARY_KEY_ASC]
  ): SingleTableItemsConnection!
  title: String
  type: ItemType!
  updatedAt: Datetime!
}

type SingleTableChecklistItem implements SingleTableItem {
  archivedAt: Datetime
  authorId: Int!
  createdAt: Datetime!
  description: String
  id: Int!
  isExplicitlyArchived: Boolean!
  meaningOfLife: Int
  note: String
  parentId: Int

  """Reads a single `Person` that is related to this `SingleTableItem`."""
  personByAuthorId: Person
  position: BigInt!

  """Reads a single `Priority` that is related to this `SingleTableItem`."""
  priorityByPriorityId: Priority
  priorityId: Int

  """
  Reads a single `SingleTableTopic` that is related to this `SingleTableChecklistItem`.
  """
  rootTopic: SingleTableTopic
  rootTopicId: Int

  """
  Reads a single `SingleTableItem` that is related to this `SingleTableItem`.
  """
  singleTableItemByParentId: SingleTableItem

  """
  Reads and enables pagination through a set of `SingleTableItemRelationCompositePk`.
  """
  singleTableItemRelationCompositePksByChildId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SingleTableItemRelationCompositePkCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `SingleTableItemRelationCompositePk`."""
    orderBy: [SingleTableItemRelationCompositePksOrderBy!] = [PRIMARY_KEY_ASC]
  ): SingleTableItemRelationCompositePksConnection!

  """
  Reads and enables pagination through a set of `SingleTableItemRelationCompositePk`.
  """
  singleTableItemRelationCompositePksByParentId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SingleTableItemRelationCompositePkCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `SingleTableItemRelationCompositePk`."""
    orderBy: [SingleTableItemRelationCompositePksOrderBy!] = [PRIMARY_KEY_ASC]
  ): SingleTableItemRelationCompositePksConnection!

  """
  Reads and enables pagination through a set of `SingleTableItemRelation`.
  """
  singleTableItemRelationsByChildId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SingleTableItemRelationCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `SingleTableItemRelation`."""
    orderBy: [SingleTableItemRelationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): SingleTableItemRelationsConnection!

  """
  Reads and enables pagination through a set of `SingleTableItemRelation`.
  """
  singleTableItemRelationsByParentId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SingleTableItemRelationCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `SingleTableItemRelation`."""
    orderBy: [SingleTableItemRelationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): SingleTableItemRelationsConnection!

  """Reads and enables pagination through a set of `SingleTableItem`."""
  singleTableItemsByParentId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SingleTableItemCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `SingleTableItem`."""
    orderBy: [SingleTableItemsOrderBy!] = [PRIMARY_KEY_ASC]
  ): SingleTableItemsConnection!
  type: ItemType!
  updatedAt: Datetime!
}

type SingleTableDivider implements SingleTableItem {
  archivedAt: Datetime
  authorId: Int!
  color: String
  createdAt: Datetime!
  id: Int!
  isExplicitlyArchived: Boolean!
  meaningOfLife: Int
  parentId: Int

  """Reads a single `Person` that is related to this `SingleTableItem`."""
  personByAuthorId: Person
  position: BigInt!

  """
  Reads a single `SingleTableTopic` that is related to this `SingleTableDivider`.
  """
  rootTopic: SingleTableTopic
  rootTopicId: Int

  """
  Reads a single `SingleTableItem` that is related to this `SingleTableItem`.
  """
  singleTableItemByParentId: SingleTableItem

  """
  Reads and enables pagination through a set of `SingleTableItemRelationCompositePk`.
  """
  singleTableItemRelationCompositePksByChildId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SingleTableItemRelationCompositePkCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `SingleTableItemRelationCompositePk`."""
    orderBy: [SingleTableItemRelationCompositePksOrderBy!] = [PRIMARY_KEY_ASC]
  ): SingleTableItemRelationCompositePksConnection!

  """
  Reads and enables pagination through a set of `SingleTableItemRelationCompositePk`.
  """
  singleTableItemRelationCompositePksByParentId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SingleTableItemRelationCompositePkCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `SingleTableItemRelationCompositePk`."""
    orderBy: [SingleTableItemRelationCompositePksOrderBy!] = [PRIMARY_KEY_ASC]
  ): SingleTableItemRelationCompositePksConnection!

  """
  Reads and enables pagination through a set of `SingleTableItemRelation`.
  """
  singleTableItemRelationsByChildId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SingleTableItemRelationCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `SingleTableItemRelation`."""
    orderBy: [SingleTableItemRelationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): SingleTableItemRelationsConnection!

  """
  Reads and enables pagination through a set of `SingleTableItemRelation`.
  """
  singleTableItemRelationsByParentId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SingleTableItemRelationCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `SingleTableItemRelation`."""
    orderBy: [SingleTableItemRelationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): SingleTableItemRelationsConnection!

  """Reads and enables pagination through a set of `SingleTableItem`."""
  singleTableItemsByParentId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SingleTableItemCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `SingleTableItem`."""
    orderBy: [SingleTableItemsOrderBy!] = [PRIMARY_KEY_ASC]
  ): SingleTableItemsConnection!
  title: String
  type: ItemType!
  updatedAt: Datetime!
}

interface SingleTableItem {
  archivedAt: Datetime
  authorId: Int!
  createdAt: Datetime!
  id: Int!
  isExplicitlyArchived: Boolean!
  parentId: Int

  """Reads a single `Person` that is related to this `SingleTableItem`."""
  personByAuthorId: Person
  position: BigInt!

  """
  Reads a single `SingleTableTopic` that is related to this `SingleTableItem`.
  """
  rootTopic: SingleTableTopic
  rootTopicId: Int

  """
  Reads a single `SingleTableItem` that is related to this `SingleTableItem`.
  """
  singleTableItemByParentId: SingleTableItem

  """
  Reads and enables pagination through a set of `SingleTableItemRelationCompositePk`.
  """
  singleTableItemRelationCompositePksByChildId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
  ): SingleTableItemRelationCompositePksConnection!

  """
  Reads and enables pagination through a set of `SingleTableItemRelationCompositePk`.
  """
  singleTableItemRelationCompositePksByParentId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
  ): SingleTableItemRelationCompositePksConnection!

  """
  Reads and enables pagination through a set of `SingleTableItemRelation`.
  """
  singleTableItemRelationsByChildId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
  ): SingleTableItemRelationsConnection!

  """
  Reads and enables pagination through a set of `SingleTableItemRelation`.
  """
  singleTableItemRelationsByParentId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
  ): SingleTableItemRelationsConnection!

  """Reads and enables pagination through a set of `SingleTableItem`."""
  singleTableItemsByParentId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
  ): SingleTableItemsConnection!
  type: ItemType!
  updatedAt: Datetime!
}

"""
A condition to be used against `SingleTableItem` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input SingleTableItemCondition {
  """Checks for equality with the object’s `archivedAt` field."""
  archivedAt: Datetime

  """Checks for equality with the object’s `authorId` field."""
  authorId: Int

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `isExplicitlyArchived` field."""
  isExplicitlyArchived: Boolean

  """Checks for equality with the object’s `parentId` field."""
  parentId: Int

  """Checks for equality with the object’s `position` field."""
  position: BigInt

  """Checks for equality with the object’s `rootTopicId` field."""
  rootTopicId: Int

  """Checks for equality with the object’s `type` field."""
  type: ItemType

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime
}

type SingleTableItemRelation {
  childId: Int!
  id: Int!
  parentId: Int!

  """
  Reads a single `SingleTableItem` that is related to this `SingleTableItemRelation`.
  """
  singleTableItemByChildId: SingleTableItem

  """
  Reads a single `SingleTableItem` that is related to this `SingleTableItemRelation`.
  """
  singleTableItemByParentId: SingleTableItem
}

type SingleTableItemRelationCompositePk {
  childId: Int!
  parentId: Int!

  """
  Reads a single `SingleTableItem` that is related to this `SingleTableItemRelationCompositePk`.
  """
  singleTableItemByChildId: SingleTableItem

  """
  Reads a single `SingleTableItem` that is related to this `SingleTableItemRelationCompositePk`.
  """
  singleTableItemByParentId: SingleTableItem
}

"""
A condition to be used against `SingleTableItemRelationCompositePk` object
types. All fields are tested for equality and combined with a logical ‘and.’
"""
input SingleTableItemRelationCompositePkCondition {
  """Checks for equality with the object’s `childId` field."""
  childId: Int

  """Checks for equality with the object’s `parentId` field."""
  parentId: Int
}

"""An input for mutations affecting `SingleTableItemRelationCompositePk`"""
input SingleTableItemRelationCompositePkInput {
  childId: Int!
  parentId: Int!
}

"""
Represents an update to a `SingleTableItemRelationCompositePk`. Fields that are set will be updated.
"""
input SingleTableItemRelationCompositePkPatch {
  childId: Int
  parentId: Int
}

"""A connection to a list of `SingleTableItemRelationCompositePk` values."""
type SingleTableItemRelationCompositePksConnection {
  """
  A list of edges which contains the `SingleTableItemRelationCompositePk` and cursor to aid in pagination.
  """
  edges: [SingleTableItemRelationCompositePksEdge]!

  """A list of `SingleTableItemRelationCompositePk` objects."""
  nodes: [SingleTableItemRelationCompositePk]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `SingleTableItemRelationCompositePk` you could get from the connection.
  """
  totalCount: Int!
}

"""A `SingleTableItemRelationCompositePk` edge in the connection."""
type SingleTableItemRelationCompositePksEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `SingleTableItemRelationCompositePk` at the end of the edge."""
  node: SingleTableItemRelationCompositePk
}

"""Methods to use when ordering `SingleTableItemRelationCompositePk`."""
enum SingleTableItemRelationCompositePksOrderBy {
  CHILD_ID_ASC
  CHILD_ID_DESC
  NATURAL
  PARENT_ID_ASC
  PARENT_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `SingleTableItemRelation` object types. All
fields are tested for equality and combined with a logical ‘and.’
"""
input SingleTableItemRelationCondition {
  """Checks for equality with the object’s `childId` field."""
  childId: Int

  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `parentId` field."""
  parentId: Int
}

"""An input for mutations affecting `SingleTableItemRelation`"""
input SingleTableItemRelationInput {
  childId: Int!
  id: Int
  parentId: Int!
}

"""
Represents an update to a `SingleTableItemRelation`. Fields that are set will be updated.
"""
input SingleTableItemRelationPatch {
  childId: Int
  id: Int
  parentId: Int
}

"""A connection to a list of `SingleTableItemRelation` values."""
type SingleTableItemRelationsConnection {
  """
  A list of edges which contains the `SingleTableItemRelation` and cursor to aid in pagination.
  """
  edges: [SingleTableItemRelationsEdge]!

  """A list of `SingleTableItemRelation` objects."""
  nodes: [SingleTableItemRelation]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `SingleTableItemRelation` you could get from the connection.
  """
  totalCount: Int!
}

"""A `SingleTableItemRelation` edge in the connection."""
type SingleTableItemRelationsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `SingleTableItemRelation` at the end of the edge."""
  node: SingleTableItemRelation
}

"""Methods to use when ordering `SingleTableItemRelation`."""
enum SingleTableItemRelationsOrderBy {
  CHILD_ID_ASC
  CHILD_ID_DESC
  ID_ASC
  ID_DESC
  NATURAL
  PARENT_ID_ASC
  PARENT_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""A connection to a list of `SingleTableItem` values."""
type SingleTableItemsConnection {
  """
  A list of edges which contains the `SingleTableItem` and cursor to aid in pagination.
  """
  edges: [SingleTableItemsEdge]!

  """A list of `SingleTableItem` objects."""
  nodes: [SingleTableItem]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `SingleTableItem` you could get from the connection.
  """
  totalCount: Int!
}

"""A `SingleTableItem` edge in the connection."""
type SingleTableItemsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `SingleTableItem` at the end of the edge."""
  node: SingleTableItem
}

"""Methods to use when ordering `SingleTableItem`."""
enum SingleTableItemsOrderBy {
  ARCHIVED_AT_ASC
  ARCHIVED_AT_DESC
  AUTHOR_ID_ASC
  AUTHOR_ID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  ID_ASC
  ID_DESC
  IS_EXPLICITLY_ARCHIVED_ASC
  IS_EXPLICITLY_ARCHIVED_DESC
  NATURAL
  PARENT_ID_ASC
  PARENT_ID_DESC
  POSITION_ASC
  POSITION_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  ROOT_TOPIC_ID_ASC
  ROOT_TOPIC_ID_DESC
  TYPE_ASC
  TYPE_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
}

type SingleTablePost implements SingleTableItem {
  archivedAt: Datetime
  authorId: Int!
  createdAt: Datetime!
  description: String
  id: Int!
  isExplicitlyArchived: Boolean!
  meaningOfLife: Int
  note: String
  parentId: Int

  """Reads a single `Person` that is related to this `SingleTableItem`."""
  personByAuthorId: Person
  position: BigInt!

  """Reads a single `Priority` that is related to this `SingleTableItem`."""
  priorityByPriorityId: Priority
  priorityId: Int

  """
  Reads a single `SingleTableTopic` that is related to this `SingleTablePost`.
  """
  rootTopic: SingleTableTopic
  rootTopicId: Int

  """
  Reads a single `SingleTableItem` that is related to this `SingleTableItem`.
  """
  singleTableItemByParentId: SingleTableItem

  """
  Reads and enables pagination through a set of `SingleTableItemRelationCompositePk`.
  """
  singleTableItemRelationCompositePksByChildId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SingleTableItemRelationCompositePkCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `SingleTableItemRelationCompositePk`."""
    orderBy: [SingleTableItemRelationCompositePksOrderBy!] = [PRIMARY_KEY_ASC]
  ): SingleTableItemRelationCompositePksConnection!

  """
  Reads and enables pagination through a set of `SingleTableItemRelationCompositePk`.
  """
  singleTableItemRelationCompositePksByParentId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SingleTableItemRelationCompositePkCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `SingleTableItemRelationCompositePk`."""
    orderBy: [SingleTableItemRelationCompositePksOrderBy!] = [PRIMARY_KEY_ASC]
  ): SingleTableItemRelationCompositePksConnection!

  """
  Reads and enables pagination through a set of `SingleTableItemRelation`.
  """
  singleTableItemRelationsByChildId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SingleTableItemRelationCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `SingleTableItemRelation`."""
    orderBy: [SingleTableItemRelationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): SingleTableItemRelationsConnection!

  """
  Reads and enables pagination through a set of `SingleTableItemRelation`.
  """
  singleTableItemRelationsByParentId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SingleTableItemRelationCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `SingleTableItemRelation`."""
    orderBy: [SingleTableItemRelationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): SingleTableItemRelationsConnection!

  """Reads and enables pagination through a set of `SingleTableItem`."""
  singleTableItemsByParentId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SingleTableItemCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `SingleTableItem`."""
    orderBy: [SingleTableItemsOrderBy!] = [PRIMARY_KEY_ASC]
  ): SingleTableItemsConnection!
  subject: String
  type: ItemType!
  updatedAt: Datetime!
}

type SingleTableTopic implements SingleTableItem {
  archivedAt: Datetime
  authorId: Int!
  createdAt: Datetime!
  id: Int!
  isExplicitlyArchived: Boolean!
  meaningOfLife: Int
  parentId: Int

  """Reads a single `Person` that is related to this `SingleTableItem`."""
  personByAuthorId: Person
  position: BigInt!

  """
  Reads a single `SingleTableTopic` that is related to this `SingleTableTopic`.
  """
  rootTopic: SingleTableTopic
  rootTopicId: Int

  """
  Reads a single `SingleTableItem` that is related to this `SingleTableItem`.
  """
  singleTableItemByParentId: SingleTableItem

  """
  Reads and enables pagination through a set of `SingleTableItemRelationCompositePk`.
  """
  singleTableItemRelationCompositePksByChildId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SingleTableItemRelationCompositePkCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `SingleTableItemRelationCompositePk`."""
    orderBy: [SingleTableItemRelationCompositePksOrderBy!] = [PRIMARY_KEY_ASC]
  ): SingleTableItemRelationCompositePksConnection!

  """
  Reads and enables pagination through a set of `SingleTableItemRelationCompositePk`.
  """
  singleTableItemRelationCompositePksByParentId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SingleTableItemRelationCompositePkCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `SingleTableItemRelationCompositePk`."""
    orderBy: [SingleTableItemRelationCompositePksOrderBy!] = [PRIMARY_KEY_ASC]
  ): SingleTableItemRelationCompositePksConnection!

  """
  Reads and enables pagination through a set of `SingleTableItemRelation`.
  """
  singleTableItemRelationsByChildId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SingleTableItemRelationCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `SingleTableItemRelation`."""
    orderBy: [SingleTableItemRelationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): SingleTableItemRelationsConnection!

  """
  Reads and enables pagination through a set of `SingleTableItemRelation`.
  """
  singleTableItemRelationsByParentId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SingleTableItemRelationCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `SingleTableItemRelation`."""
    orderBy: [SingleTableItemRelationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): SingleTableItemRelationsConnection!

  """Reads and enables pagination through a set of `SingleTableItem`."""
  singleTableItemsByParentId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SingleTableItemCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `SingleTableItem`."""
    orderBy: [SingleTableItemsOrderBy!] = [PRIMARY_KEY_ASC]
  ): SingleTableItemsConnection!
  title: String!
  type: ItemType!
  updatedAt: Datetime!
}

"""A connection to a list of `ThirdPartyVulnerability` values."""
type ThirdPartyVulnerabilitiesConnection {
  """
  A list of edges which contains the `ThirdPartyVulnerability` and cursor to aid in pagination.
  """
  edges: [ThirdPartyVulnerabilitiesEdge]!

  """A list of `ThirdPartyVulnerability` objects."""
  nodes: [ThirdPartyVulnerability]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `ThirdPartyVulnerability` you could get from the connection.
  """
  totalCount: Int!
}

"""A `ThirdPartyVulnerability` edge in the connection."""
type ThirdPartyVulnerabilitiesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ThirdPartyVulnerability` at the end of the edge."""
  node: ThirdPartyVulnerability
}

"""Methods to use when ordering `ThirdPartyVulnerability`."""
enum ThirdPartyVulnerabilitiesOrderBy {
  CVSS_SCORE_ASC
  CVSS_SCORE_DESC
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  VENDOR_NAME_ASC
  VENDOR_NAME_DESC
}

type ThirdPartyVulnerability implements Vulnerability {
  """Reads and enables pagination through a set of `Application`."""
  applications(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Filter results to only those of the given types"""
    only: [ApplicationType!] @deprecated(reason: "EXPERIMENTAL")

    """The method to use when ordering `Application`."""
    orderBy: [ApplicationsOrderBy!]
  ): ApplicationsConnection!
  cvssScore: Float!
  cvssScoreInt: Int
  id: Int!
  name: String!

  """Reads and enables pagination through a set of `PersonOrOrganization`."""
  owners: PersonOrOrganizationConnection!
  vendorName: String
}

"""
A condition to be used against `ThirdPartyVulnerability` object types. All
fields are tested for equality and combined with a logical ‘and.’
"""
input ThirdPartyVulnerabilityCondition {
  """Checks for equality with the object’s `cvssScore` field."""
  cvssScore: Float

  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `vendorName` field."""
  vendorName: String
}

"""An input for mutations affecting `ThirdPartyVulnerability`"""
input ThirdPartyVulnerabilityInput {
  cvssScore: Float!
  id: Int!
  name: String!
  vendorName: String
}

"""
Represents an update to a `ThirdPartyVulnerability`. Fields that are set will be updated.
"""
input ThirdPartyVulnerabilityPatch {
  cvssScore: Float
  id: Int
  name: String
  vendorName: String
}

"""All input for the `updateAwsApplicationById` mutation."""
input UpdateAwsApplicationByIdInput {
  """
  An object where the defined keys will be set on the `AwsApplication` being updated.
  """
  awsApplicationPatch: AwsApplicationPatch!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""The output of our update `AwsApplication` mutation."""
type UpdateAwsApplicationPayload {
  """The `AwsApplication` that was updated by this mutation."""
  awsApplication: AwsApplication

  """An edge for our `AwsApplication`. May be used by Relay 1."""
  awsApplicationEdge(
    """The method to use when ordering `AwsApplication`."""
    orderBy: [AwsApplicationsOrderBy!]! = [PRIMARY_KEY_ASC]
  ): AwsApplicationsEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Reads a single `Organization` that is related to this `AwsApplication`.
  """
  organizationByOrganizationId: Organization

  """Reads a single `Person` that is related to this `AwsApplication`."""
  personByPersonId: Person

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateFirstPartyVulnerabilityById` mutation."""
input UpdateFirstPartyVulnerabilityByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `FirstPartyVulnerability` being updated.
  """
  firstPartyVulnerabilityPatch: FirstPartyVulnerabilityPatch!
  id: Int!
}

"""The output of our update `FirstPartyVulnerability` mutation."""
type UpdateFirstPartyVulnerabilityPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `FirstPartyVulnerability` that was updated by this mutation."""
  firstPartyVulnerability: FirstPartyVulnerability

  """An edge for our `FirstPartyVulnerability`. May be used by Relay 1."""
  firstPartyVulnerabilityEdge(
    """The method to use when ordering `FirstPartyVulnerability`."""
    orderBy: [FirstPartyVulnerabilitiesOrderBy!]! = [PRIMARY_KEY_ASC]
  ): FirstPartyVulnerabilitiesEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateGcpApplicationById` mutation."""
input UpdateGcpApplicationByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `GcpApplication` being updated.
  """
  gcpApplicationPatch: GcpApplicationPatch!
  id: Int!
}

"""The output of our update `GcpApplication` mutation."""
type UpdateGcpApplicationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `GcpApplication` that was updated by this mutation."""
  gcpApplication: GcpApplication

  """An edge for our `GcpApplication`. May be used by Relay 1."""
  gcpApplicationEdge(
    """The method to use when ordering `GcpApplication`."""
    orderBy: [GcpApplicationsOrderBy!]! = [PRIMARY_KEY_ASC]
  ): GcpApplicationsEdge

  """
  Reads a single `Organization` that is related to this `GcpApplication`.
  """
  organizationByOrganizationId: Organization

  """Reads a single `Person` that is related to this `GcpApplication`."""
  personByPersonId: Person

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateLogEntryById` mutation."""
input UpdateLogEntryByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!

  """
  An object where the defined keys will be set on the `LogEntry` being updated.
  """
  logEntryPatch: LogEntryPatch!
}

"""The output of our update `LogEntry` mutation."""
type UpdateLogEntryPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `LogEntry` that was updated by this mutation."""
  logEntry: LogEntry

  """An edge for our `LogEntry`. May be used by Relay 1."""
  logEntryEdge(
    """The method to use when ordering `LogEntry`."""
    orderBy: [LogEntriesOrderBy!]! = [PRIMARY_KEY_ASC]
  ): LogEntriesEdge

  """Reads a single `Organization` that is related to this `LogEntry`."""
  organizationByOrganizationId: Organization

  """Reads a single `Person` that is related to this `LogEntry`."""
  personByPersonId: Person

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateOrganizationByName` mutation."""
input UpdateOrganizationByNameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  name: String!

  """
  An object where the defined keys will be set on the `Organization` being updated.
  """
  organizationPatch: OrganizationPatch!
}

"""All input for the `updateOrganizationByOrganizationId` mutation."""
input UpdateOrganizationByOrganizationIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  organizationId: Int!

  """
  An object where the defined keys will be set on the `Organization` being updated.
  """
  organizationPatch: OrganizationPatch!
}

"""The output of our update `Organization` mutation."""
type UpdateOrganizationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Organization` that was updated by this mutation."""
  organization: Organization

  """An edge for our `Organization`. May be used by Relay 1."""
  organizationEdge(
    """The method to use when ordering `Organization`."""
    orderBy: [OrganizationsOrderBy!]! = [PRIMARY_KEY_ASC]
  ): OrganizationsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updatePersonByPersonId` mutation."""
input UpdatePersonByPersonIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  personId: Int!

  """
  An object where the defined keys will be set on the `Person` being updated.
  """
  personPatch: PersonPatch!
}

"""All input for the `updatePersonByUsername` mutation."""
input UpdatePersonByUsernameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Person` being updated.
  """
  personPatch: PersonPatch!
  username: String!
}

"""The output of our update `Person` mutation."""
type UpdatePersonPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Person` that was updated by this mutation."""
  person: Person

  """An edge for our `Person`. May be used by Relay 1."""
  personEdge(
    """The method to use when ordering `Person`."""
    orderBy: [PeopleOrderBy!]! = [PRIMARY_KEY_ASC]
  ): PeopleEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateRelationalItemRelationById` mutation."""
input UpdateRelationalItemRelationByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!

  """
  An object where the defined keys will be set on the `RelationalItemRelation` being updated.
  """
  relationalItemRelationPatch: RelationalItemRelationPatch!
}

"""
All input for the `updateRelationalItemRelationByParentIdAndChildId` mutation.
"""
input UpdateRelationalItemRelationByParentIdAndChildIdInput {
  childId: Int!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  parentId: Int!

  """
  An object where the defined keys will be set on the `RelationalItemRelation` being updated.
  """
  relationalItemRelationPatch: RelationalItemRelationPatch!
}

"""
All input for the `updateRelationalItemRelationCompositePkByParentIdAndChildId` mutation.
"""
input UpdateRelationalItemRelationCompositePkByParentIdAndChildIdInput {
  childId: Int!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  parentId: Int!

  """
  An object where the defined keys will be set on the `RelationalItemRelationCompositePk` being updated.
  """
  relationalItemRelationCompositePkPatch: RelationalItemRelationCompositePkPatch!
}

"""The output of our update `RelationalItemRelationCompositePk` mutation."""
type UpdateRelationalItemRelationCompositePkPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `RelationalItem` that is related to this `RelationalItemRelationCompositePk`.
  """
  relationalItemByChildId: RelationalItem

  """
  Reads a single `RelationalItem` that is related to this `RelationalItemRelationCompositePk`.
  """
  relationalItemByParentId: RelationalItem

  """
  The `RelationalItemRelationCompositePk` that was updated by this mutation.
  """
  relationalItemRelationCompositePk: RelationalItemRelationCompositePk

  """
  An edge for our `RelationalItemRelationCompositePk`. May be used by Relay 1.
  """
  relationalItemRelationCompositePkEdge(
    """The method to use when ordering `RelationalItemRelationCompositePk`."""
    orderBy: [RelationalItemRelationCompositePksOrderBy!]! = [PRIMARY_KEY_ASC]
  ): RelationalItemRelationCompositePksEdge
}

"""The output of our update `RelationalItemRelation` mutation."""
type UpdateRelationalItemRelationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `RelationalItem` that is related to this `RelationalItemRelation`.
  """
  relationalItemByChildId: RelationalItem

  """
  Reads a single `RelationalItem` that is related to this `RelationalItemRelation`.
  """
  relationalItemByParentId: RelationalItem

  """The `RelationalItemRelation` that was updated by this mutation."""
  relationalItemRelation: RelationalItemRelation

  """An edge for our `RelationalItemRelation`. May be used by Relay 1."""
  relationalItemRelationEdge(
    """The method to use when ordering `RelationalItemRelation`."""
    orderBy: [RelationalItemRelationsOrderBy!]! = [PRIMARY_KEY_ASC]
  ): RelationalItemRelationsEdge
}

"""All input for the `updateSingleTableItemRelationById` mutation."""
input UpdateSingleTableItemRelationByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!

  """
  An object where the defined keys will be set on the `SingleTableItemRelation` being updated.
  """
  singleTableItemRelationPatch: SingleTableItemRelationPatch!
}

"""
All input for the `updateSingleTableItemRelationByParentIdAndChildId` mutation.
"""
input UpdateSingleTableItemRelationByParentIdAndChildIdInput {
  childId: Int!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  parentId: Int!

  """
  An object where the defined keys will be set on the `SingleTableItemRelation` being updated.
  """
  singleTableItemRelationPatch: SingleTableItemRelationPatch!
}

"""
All input for the `updateSingleTableItemRelationCompositePkByParentIdAndChildId` mutation.
"""
input UpdateSingleTableItemRelationCompositePkByParentIdAndChildIdInput {
  childId: Int!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  parentId: Int!

  """
  An object where the defined keys will be set on the `SingleTableItemRelationCompositePk` being updated.
  """
  singleTableItemRelationCompositePkPatch: SingleTableItemRelationCompositePkPatch!
}

"""
The output of our update `SingleTableItemRelationCompositePk` mutation.
"""
type UpdateSingleTableItemRelationCompositePkPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `SingleTableItem` that is related to this `SingleTableItemRelationCompositePk`.
  """
  singleTableItemByChildId: SingleTableItem

  """
  Reads a single `SingleTableItem` that is related to this `SingleTableItemRelationCompositePk`.
  """
  singleTableItemByParentId: SingleTableItem

  """
  The `SingleTableItemRelationCompositePk` that was updated by this mutation.
  """
  singleTableItemRelationCompositePk: SingleTableItemRelationCompositePk

  """
  An edge for our `SingleTableItemRelationCompositePk`. May be used by Relay 1.
  """
  singleTableItemRelationCompositePkEdge(
    """The method to use when ordering `SingleTableItemRelationCompositePk`."""
    orderBy: [SingleTableItemRelationCompositePksOrderBy!]! = [PRIMARY_KEY_ASC]
  ): SingleTableItemRelationCompositePksEdge
}

"""The output of our update `SingleTableItemRelation` mutation."""
type UpdateSingleTableItemRelationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `SingleTableItem` that is related to this `SingleTableItemRelation`.
  """
  singleTableItemByChildId: SingleTableItem

  """
  Reads a single `SingleTableItem` that is related to this `SingleTableItemRelation`.
  """
  singleTableItemByParentId: SingleTableItem

  """The `SingleTableItemRelation` that was updated by this mutation."""
  singleTableItemRelation: SingleTableItemRelation

  """An edge for our `SingleTableItemRelation`. May be used by Relay 1."""
  singleTableItemRelationEdge(
    """The method to use when ordering `SingleTableItemRelation`."""
    orderBy: [SingleTableItemRelationsOrderBy!]! = [PRIMARY_KEY_ASC]
  ): SingleTableItemRelationsEdge
}

"""All input for the `updateThirdPartyVulnerabilityById` mutation."""
input UpdateThirdPartyVulnerabilityByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!

  """
  An object where the defined keys will be set on the `ThirdPartyVulnerability` being updated.
  """
  thirdPartyVulnerabilityPatch: ThirdPartyVulnerabilityPatch!
}

"""The output of our update `ThirdPartyVulnerability` mutation."""
type UpdateThirdPartyVulnerabilityPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `ThirdPartyVulnerability` that was updated by this mutation."""
  thirdPartyVulnerability: ThirdPartyVulnerability

  """An edge for our `ThirdPartyVulnerability`. May be used by Relay 1."""
  thirdPartyVulnerabilityEdge(
    """The method to use when ordering `ThirdPartyVulnerability`."""
    orderBy: [ThirdPartyVulnerabilitiesOrderBy!]! = [PRIMARY_KEY_ASC]
  ): ThirdPartyVulnerabilitiesEdge
}

"""A connection to a list of `Vulnerability` values."""
type VulnerabilitiesConnection {
  """
  A list of edges which contains the `Vulnerability` and cursor to aid in pagination.
  """
  edges: [VulnerabilitiesEdge]!

  """A list of `Vulnerability` objects."""
  nodes: [Vulnerability]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Vulnerability` you could get from the connection."""
  totalCount: Int!
}

"""A `Vulnerability` edge in the connection."""
type VulnerabilitiesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Vulnerability` at the end of the edge."""
  node: Vulnerability
}

"""Methods to use when ordering `Vulnerability`."""
enum VulnerabilitiesOrderBy {
  CVSS_SCORE_ASC
  CVSS_SCORE_DESC
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  NATURAL
}

interface Vulnerability {
  """Reads and enables pagination through a set of `Application`."""
  applications(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Filter results to only those of the given types"""
    only: [ApplicationType!] @deprecated(reason: "EXPERIMENTAL")
  ): ApplicationsConnection!
  cvssScore: Float!
  id: Int!
  name: String!

  """Reads and enables pagination through a set of `PersonOrOrganization`."""
  owners: PersonOrOrganizationConnection!
}

"""
A condition to be used against `Vulnerability` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input VulnerabilityCondition {
  """Checks for equality with the object’s `cvssScore` field."""
  cvssScore: Float

  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `name` field."""
  name: String
}

enum VulnerabilityType {
  FirstPartyVulnerability
  ThirdPartyVulnerability
}

interface ZeroImplementation {
  id: Int
  name: String
}

"""
A condition to be used against `ZeroImplementation` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input ZeroImplementationCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `name` field."""
  name: String
}

"""A connection to a list of `ZeroImplementation` values."""
type ZeroImplementationsConnection {
  """
  A list of edges which contains the `ZeroImplementation` and cursor to aid in pagination.
  """
  edges: [ZeroImplementationsEdge]!

  """A list of `ZeroImplementation` objects."""
  nodes: [ZeroImplementation]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `ZeroImplementation` you could get from the connection.
  """
  totalCount: Int!
}

"""A `ZeroImplementation` edge in the connection."""
type ZeroImplementationsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ZeroImplementation` at the end of the edge."""
  node: ZeroImplementation
}

"""Methods to use when ordering `ZeroImplementation`."""
enum ZeroImplementationsOrderBy {
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  NATURAL
}
